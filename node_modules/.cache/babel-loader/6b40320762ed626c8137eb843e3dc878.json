{"ast":null,"code":"'use strict';\n\nvar Region = require('region');\n\n/**\n * @static\n * Aligns the source region to the target region, so as to correspond to the given alignment.\n *\n * NOTE that this method makes changes on the sourceRegion in order for it to be aligned as specified.\n *\n * @param {Region} sourceRegion\n * @param {Region} targetRegion\n *\n * @param {String} align A string with 2 valid align positions, eg: 'tr-bl'.\n * For valid positions, see {@link Region#getPoint}\n *\n * Having 2 regions, we need to be able to align them as we wish:\n *\n * for example, if we have\n *\n *       source    target\n *       ________________\n *       ____\n *      |    |     ________\n *      |____|    |        |\n *                |        |\n *                |________|\n *\n * and we align 't-t', we get:\n *\n *       source    target\n *       _________________\n *\n *       ____      ________\n *      |    |    |        |\n *      |____|    |        |\n *                |________|\n *\n *  In this case, the source was moved down to be aligned to the top of the target\n *\n *\n * and if we align 'tc-tc' we get\n *\n *       source     target\n *       __________________\n *\n *                 ________\n *                | |    | |\n *                | |____| |\n *                |________|\n *\n *  Since the source was moved to have the top-center point to be the same with target top-center\n *\n *\n *\n * @return {RegionClass} The Region class\n */\nRegion.align = function (sourceRegion, targetRegion, align) {\n  targetRegion = Region.from(targetRegion);\n  align = (align || 'c-c').split('-');\n\n  //<debug>\n  if (align.length != 2) {\n    console.warn('Incorrect region alignment! The align parameter need to be in the form \\'br-c\\', that is, a - separated string!', align);\n  }\n  //</debug>\n\n  return Region.alignToPoint(sourceRegion, targetRegion.getPoint(align[1]), align[0]);\n};\n\n/**\n * Modifies the given region to be aligned to the point, as specified by anchor\n *\n * @param {Region} region The region to align to the point\n * @param {Object} point The point to be used as a reference\n * @param {Number} point.x\n * @param {Number} point.y\n * @param {String} anchor The position where to anchor the region to the point. See {@link #getPoint} for available options/\n *\n * @return {Region} the given region\n */\nRegion.alignToPoint = function (region, point, anchor) {\n  region = Region.from(region);\n  var sourcePoint = region.getPoint(anchor);\n  var count = 0;\n  var shiftObj = {};\n  if (sourcePoint.x != null && point.x != null) {\n    count++;\n    shiftObj.left = point.x - sourcePoint.x;\n  }\n  if (sourcePoint.y != null && point.y != null) {\n    count++;\n    shiftObj.top = point.y - sourcePoint.y;\n  }\n  if (count) {\n    region.shift(shiftObj);\n  }\n  return region;\n};","map":{"version":3,"names":["Region","require","align","sourceRegion","targetRegion","from","split","length","console","warn","alignToPoint","getPoint","region","point","anchor","sourcePoint","count","shiftObj","x","left","y","top","shift"],"sources":["/home/ocode-2023/Desktop/Dashboard/Admin/node_modules/region-align/Region.static.js"],"sourcesContent":["'use strict'\n\nvar Region = require('region')\n\n/**\n * @static\n * Aligns the source region to the target region, so as to correspond to the given alignment.\n *\n * NOTE that this method makes changes on the sourceRegion in order for it to be aligned as specified.\n *\n * @param {Region} sourceRegion\n * @param {Region} targetRegion\n *\n * @param {String} align A string with 2 valid align positions, eg: 'tr-bl'.\n * For valid positions, see {@link Region#getPoint}\n *\n * Having 2 regions, we need to be able to align them as we wish:\n *\n * for example, if we have\n *\n *       source    target\n *       ________________\n *       ____\n *      |    |     ________\n *      |____|    |        |\n *                |        |\n *                |________|\n *\n * and we align 't-t', we get:\n *\n *       source    target\n *       _________________\n *\n *       ____      ________\n *      |    |    |        |\n *      |____|    |        |\n *                |________|\n *\n *  In this case, the source was moved down to be aligned to the top of the target\n *\n *\n * and if we align 'tc-tc' we get\n *\n *       source     target\n *       __________________\n *\n *                 ________\n *                | |    | |\n *                | |____| |\n *                |________|\n *\n *  Since the source was moved to have the top-center point to be the same with target top-center\n *\n *\n *\n * @return {RegionClass} The Region class\n */\nRegion.align = function(sourceRegion, targetRegion, align){\n\n    targetRegion = Region.from(targetRegion)\n\n    align = (align || 'c-c').split('-')\n\n    //<debug>\n    if (align.length != 2){\n        console.warn('Incorrect region alignment! The align parameter need to be in the form \\'br-c\\', that is, a - separated string!', align)\n    }\n    //</debug>\n\n    return Region.alignToPoint(sourceRegion, targetRegion.getPoint(align[1]), align[0])\n}\n\n/**\n * Modifies the given region to be aligned to the point, as specified by anchor\n *\n * @param {Region} region The region to align to the point\n * @param {Object} point The point to be used as a reference\n * @param {Number} point.x\n * @param {Number} point.y\n * @param {String} anchor The position where to anchor the region to the point. See {@link #getPoint} for available options/\n *\n * @return {Region} the given region\n */\nRegion.alignToPoint = function(region, point, anchor){\n\n    region = Region.from(region)\n\n    var sourcePoint = region.getPoint(anchor)\n    var count       = 0\n    var shiftObj    = {}\n\n    if (\n            sourcePoint.x != null &&\n            point.x != null\n        ){\n\n            count++\n            shiftObj.left = point.x - sourcePoint.x\n    }\n\n    if (\n            sourcePoint.y != null &&\n            point.y != null\n        ){\n            count++\n            shiftObj.top = point.y - sourcePoint.y\n    }\n\n    if (count){\n\n        region.shift(shiftObj)\n\n    }\n\n    return region\n}"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,MAAM,CAACE,KAAK,GAAG,UAASC,YAAY,EAAEC,YAAY,EAAEF,KAAK,EAAC;EAEtDE,YAAY,GAAGJ,MAAM,CAACK,IAAI,CAACD,YAAY,CAAC;EAExCF,KAAK,GAAG,CAACA,KAAK,IAAI,KAAK,EAAEI,KAAK,CAAC,GAAG,CAAC;;EAEnC;EACA,IAAIJ,KAAK,CAACK,MAAM,IAAI,CAAC,EAAC;IAClBC,OAAO,CAACC,IAAI,CAAC,iHAAiH,EAAEP,KAAK,CAAC;EAC1I;EACA;;EAEA,OAAOF,MAAM,CAACU,YAAY,CAACP,YAAY,EAAEC,YAAY,CAACO,QAAQ,CAACT,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,MAAM,CAACU,YAAY,GAAG,UAASE,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAC;EAEjDF,MAAM,GAAGZ,MAAM,CAACK,IAAI,CAACO,MAAM,CAAC;EAE5B,IAAIG,WAAW,GAAGH,MAAM,CAACD,QAAQ,CAACG,MAAM,CAAC;EACzC,IAAIE,KAAK,GAAS,CAAC;EACnB,IAAIC,QAAQ,GAAM,CAAC,CAAC;EAEpB,IACQF,WAAW,CAACG,CAAC,IAAI,IAAI,IACrBL,KAAK,CAACK,CAAC,IAAI,IAAI,EAClB;IAEGF,KAAK,EAAE;IACPC,QAAQ,CAACE,IAAI,GAAGN,KAAK,CAACK,CAAC,GAAGH,WAAW,CAACG,CAAC;EAC/C;EAEA,IACQH,WAAW,CAACK,CAAC,IAAI,IAAI,IACrBP,KAAK,CAACO,CAAC,IAAI,IAAI,EAClB;IACGJ,KAAK,EAAE;IACPC,QAAQ,CAACI,GAAG,GAAGR,KAAK,CAACO,CAAC,GAAGL,WAAW,CAACK,CAAC;EAC9C;EAEA,IAAIJ,KAAK,EAAC;IAENJ,MAAM,CAACU,KAAK,CAACL,QAAQ,CAAC;EAE1B;EAEA,OAAOL,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"script"}