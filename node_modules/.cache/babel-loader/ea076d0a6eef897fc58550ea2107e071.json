{"ast":null,"code":"'use strict';\n\nvar Region = require('region');\n\n/**\n *\n * This method is trying to align the sourceRegion to the targetRegion, given the alignment positions\n * and the offsets. It only modifies the sourceRegion\n *\n * This is all well and easy, but if there is a constrainTo region, the algorithm has to take it into account.\n * In this case, it works as follows.\n *\n *  * start with the first alignment position. Aligns the region, adds the offset and then check for the constraint.\n *  * if the constraint condition is ok, return the position.\n *  * otherwise, remember the intersection area, if the regions are intersecting.\n *  * then go to the next specified align position, and so on, computing the maximum intersection area.\n *\n * If no alignment fits the constrainRegion, the sourceRegion will be resized to match it,\n * using the position with the maximum intersection area.\n *\n * Since we have computed the index of the position with the max intersection area, take that position,\n * and align the sourceRegion accordingly. Then resize the sourceRegion to the intersection, and reposition\n * it again, since resizing it might have destroyed the alignment.\n *\n * Return the position.\n *\n * @param {Region} sourceRegion\n * @param {Region} targetRegion\n * @param {String[]} positions\n * @param {Object} config\n * @param {Array} config.offset\n * @param {Region} config.constrain\n * @param {Boolean/Object} config.sync\n *\n * @return {String/Undefined} the chosen position for the alignment, or undefined if no position found\n */\nfunction ALIGN_TO_NORMALIZED(sourceRegion, targetRegion, positions, config) {\n  targetRegion = Region.from(targetRegion);\n  config = config || {};\n  var constrainTo = config.constrain,\n    syncOption = config.sync,\n    offsets = config.offset || [],\n    syncWidth = false,\n    syncHeight = false,\n    sourceClone = sourceRegion.clone();\n\n  /*\n   * Prepare the method arguments: positions, offsets, constrain and sync options\n   */\n  if (!Array.isArray(positions)) {\n    positions = positions ? [positions] : [];\n  }\n  if (!Array.isArray(offsets)) {\n    offsets = offsets ? [offsets] : [];\n  }\n  if (constrainTo) {\n    constrainTo = constrainTo === true ? Region.getDocRegion() : constrainTo.getRegion();\n  }\n  if (syncOption) {\n    if (syncOption.size) {\n      syncWidth = true;\n      syncHeight = true;\n    } else {\n      syncWidth = syncOption === true ? true : syncOption.width || false;\n      syncHeight = syncOption === true ? true : syncOption.height || false;\n    }\n  }\n  if (syncWidth) {\n    sourceClone.setWidth(targetRegion.getWidth());\n  }\n  if (syncHeight) {\n    sourceClone.setHeight(targetRegion.getHeight());\n  }\n  var offset,\n    i = 0,\n    len = positions.length,\n    pos,\n    intersection,\n    itArea,\n    maxArea = -1,\n    maxAreaIndex = -1;\n  for (; i < len; i++) {\n    pos = positions[i];\n    offset = offsets[i];\n    sourceClone.alignToRegion(targetRegion, pos);\n    if (offset) {\n      if (!Array.isArray(offset)) {\n        offset = offsets[i] = [offset.x || offset.left, offset.y || offset.top];\n      }\n      sourceClone.shift({\n        left: offset[0],\n        top: offset[1]\n      });\n    }\n\n    //the source region is already aligned in the correct position\n\n    if (constrainTo) {\n      //if we have a constrain region, test for the constrain\n      intersection = sourceClone.getIntersection(constrainTo);\n      if (intersection && intersection.equals(sourceClone)) {\n        //constrain respected, so return (the aligned position)\n\n        sourceRegion.set(sourceClone);\n        return pos;\n      } else {\n        //the constrain was not respected, so continue trying\n        if (intersection && (itArea = intersection.getArea()) > maxArea) {\n          maxArea = itArea;\n          maxAreaIndex = i;\n        }\n      }\n    } else {\n      sourceRegion.set(sourceClone);\n      return pos;\n    }\n  }\n\n  //no alignment respected the constraints\n  if (~maxAreaIndex) {\n    pos = positions[maxAreaIndex];\n    offset = offsets[maxAreaIndex];\n    sourceClone.alignToRegion(targetRegion, pos);\n    if (offset) {\n      sourceClone.shift({\n        left: offset[0],\n        top: offset[1]\n      });\n    }\n\n    //we are sure an intersection exists, because of the way the maxAreaIndex was computed\n    intersection = sourceClone.getIntersection(constrainTo);\n    sourceClone.setRegion(intersection);\n    sourceClone.alignToRegion(targetRegion, pos);\n    if (offset) {\n      sourceClone.shift({\n        left: offset[0],\n        top: offset[1]\n      });\n    }\n    sourceRegion.set(sourceClone);\n    return pos;\n  }\n}\nmodule.exports = ALIGN_TO_NORMALIZED;","map":{"version":3,"names":["Region","require","ALIGN_TO_NORMALIZED","sourceRegion","targetRegion","positions","config","from","constrainTo","constrain","syncOption","sync","offsets","offset","syncWidth","syncHeight","sourceClone","clone","Array","isArray","getDocRegion","getRegion","size","width","height","setWidth","getWidth","setHeight","getHeight","i","len","length","pos","intersection","itArea","maxArea","maxAreaIndex","alignToRegion","x","left","y","top","shift","getIntersection","equals","set","getArea","setRegion","module","exports"],"sources":["/home/ocode-2023/Desktop/Dashboard/Admin/node_modules/region-align/alignToNormalized.js"],"sourcesContent":["'use strict'\n\nvar Region = require('region')\n\n/**\n *\n * This method is trying to align the sourceRegion to the targetRegion, given the alignment positions\n * and the offsets. It only modifies the sourceRegion\n *\n * This is all well and easy, but if there is a constrainTo region, the algorithm has to take it into account.\n * In this case, it works as follows.\n *\n *  * start with the first alignment position. Aligns the region, adds the offset and then check for the constraint.\n *  * if the constraint condition is ok, return the position.\n *  * otherwise, remember the intersection area, if the regions are intersecting.\n *  * then go to the next specified align position, and so on, computing the maximum intersection area.\n *\n * If no alignment fits the constrainRegion, the sourceRegion will be resized to match it,\n * using the position with the maximum intersection area.\n *\n * Since we have computed the index of the position with the max intersection area, take that position,\n * and align the sourceRegion accordingly. Then resize the sourceRegion to the intersection, and reposition\n * it again, since resizing it might have destroyed the alignment.\n *\n * Return the position.\n *\n * @param {Region} sourceRegion\n * @param {Region} targetRegion\n * @param {String[]} positions\n * @param {Object} config\n * @param {Array} config.offset\n * @param {Region} config.constrain\n * @param {Boolean/Object} config.sync\n *\n * @return {String/Undefined} the chosen position for the alignment, or undefined if no position found\n */\nfunction ALIGN_TO_NORMALIZED(sourceRegion, targetRegion, positions, config){\n\n    targetRegion = Region.from(targetRegion)\n\n    config = config  || {}\n\n    var constrainTo = config.constrain,\n        syncOption  = config.sync,\n        offsets     = config.offset || [],\n        syncWidth   = false,\n        syncHeight  = false,\n        sourceClone = sourceRegion.clone()\n\n    /*\n     * Prepare the method arguments: positions, offsets, constrain and sync options\n     */\n    if (!Array.isArray(positions)){\n        positions = positions? [positions]: []\n    }\n\n    if (!Array.isArray(offsets)){\n        offsets = offsets? [offsets]: []\n    }\n\n    if (constrainTo){\n        constrainTo = constrainTo === true?\n                                Region.getDocRegion():\n                                constrainTo.getRegion()\n    }\n\n    if (syncOption){\n\n        if (syncOption.size){\n            syncWidth  = true\n            syncHeight = true\n        } else {\n            syncWidth  = syncOption === true?\n                            true:\n                            syncOption.width || false\n\n            syncHeight = syncOption === true?\n                            true:\n                            syncOption.height || false\n        }\n    }\n\n    if (syncWidth){\n        sourceClone.setWidth(targetRegion.getWidth())\n    }\n    if (syncHeight){\n        sourceClone.setHeight(targetRegion.getHeight())\n\n    }\n\n    var offset,\n        i = 0,\n        len = positions.length,\n        pos,\n        intersection,\n        itArea,\n        maxArea = -1,\n        maxAreaIndex = -1\n\n    for (; i < len; i++){\n        pos     = positions[i]\n        offset  = offsets[i]\n\n        sourceClone.alignToRegion(targetRegion, pos)\n\n        if (offset){\n            if (!Array.isArray(offset)){\n                offset = offsets[i] = [offset.x || offset.left, offset.y || offset.top]\n            }\n\n            sourceClone.shift({\n                left: offset[0],\n                top : offset[1]\n            })\n        }\n\n        //the source region is already aligned in the correct position\n\n        if (constrainTo){\n            //if we have a constrain region, test for the constrain\n            intersection = sourceClone.getIntersection(constrainTo)\n\n            if ( intersection && intersection.equals(sourceClone) ) {\n                //constrain respected, so return (the aligned position)\n\n                sourceRegion.set(sourceClone)\n                return pos\n            } else {\n\n                //the constrain was not respected, so continue trying\n                if (intersection && ((itArea = intersection.getArea()) > maxArea)){\n                    maxArea      = itArea\n                    maxAreaIndex = i\n                }\n            }\n\n        } else {\n            sourceRegion.set(sourceClone)\n            return pos\n        }\n    }\n\n    //no alignment respected the constraints\n    if (~maxAreaIndex){\n        pos     = positions[maxAreaIndex]\n        offset  = offsets[maxAreaIndex]\n\n        sourceClone.alignToRegion(targetRegion, pos)\n\n        if (offset){\n            sourceClone.shift({\n                left: offset[0],\n                top : offset[1]\n            })\n        }\n\n        //we are sure an intersection exists, because of the way the maxAreaIndex was computed\n        intersection = sourceClone.getIntersection(constrainTo)\n\n        sourceClone.setRegion(intersection)\n        sourceClone.alignToRegion(targetRegion, pos)\n\n        if (offset){\n            sourceClone.shift({\n                left: offset[0],\n                top : offset[1]\n            })\n        }\n\n        sourceRegion.set(sourceClone)\n\n        return pos\n    }\n\n}\n\nmodule.exports = ALIGN_TO_NORMALIZED"],"mappings":"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"},"metadata":{},"sourceType":"script"}