{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport accessToken from \"../jwt-token-access/accessToken\";\nimport { calenderDefaultCategories, events, tasks } from \"../../common/data\";\nlet users = [{\n  uid: 1,\n  username: \"admin\",\n  role: \"admin\",\n  password: \"123456\",\n  email: \"admin@themesbrand.com\"\n}];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios);\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.\n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Editted successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.\n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Editted successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex; //Find index of specific object using findIndex method.\n\n            objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n            users[objIndex].username = user.username; // Assign a value to locastorage\n\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Editted successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex; //Find index of specific object using findIndex method.\n\n          objIndex = users.findIndex(obj => obj.uid === user.idx); //Update object's name property.\n\n          users[objIndex].username = user.username; // Assign a value to locastorage\n\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Editted successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken; // JWT AccessToken\n\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n\n          const validUserObj = { ...user[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks]);\n        } else {\n          reject([400, \"Cannot get tasks\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n};\n\nexport default fakeBackend;","map":{"version":3,"sources":["/home/ocode/Downloads/Admin/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","accessToken","calenderDefaultCategories","events","tasks","users","uid","username","role","password","email","fakeBackend","mock","onPost","POST_FAKE_REGISTER","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","token","tokenObj","validUserObj","onGet","GET_TASKS","GET_EVENTS","ADD_NEW_EVENT","event","data","onPut","UPDATE_EVENT","onDelete","DELETE_EVENT","GET_CATEGORIES"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport MockAdapter from \"axios-mock-adapter\"\nimport * as url from \"../url_helper\"\nimport accessToken from \"../jwt-token-access/accessToken\"\n\nimport {\n  calenderDefaultCategories,\n  events,\n  tasks,\n} from \"../../common/data\"\n\nlet users = [\n  {\n    uid: 1,\n    username: \"admin\",\n    role: \"admin\",\n    password: \"123456\",\n    email: \"admin@themesbrand.com\",\n  },\n]\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios)\n\nmock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n    \n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Editted successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Editted successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Editted successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Editted successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...user[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks])\n        } else {\n          reject([400, \"Cannot get tasks\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events])\n        } else {\n          reject([400, \"Cannot get events\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot add event\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot update event\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event])\n        } else {\n          reject([400, \"Cannot delete event\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories])\n        } else {\n          reject([400, \"Cannot get categories\"])\n        }\n      })\n    })\n  })\n\n}\n\nexport default fakeBackend\n"]},"metadata":{},"sourceType":"module"}