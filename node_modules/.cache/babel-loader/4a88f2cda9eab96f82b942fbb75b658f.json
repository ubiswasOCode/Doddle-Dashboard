{"ast":null,"code":"var _jsxFileName = \"/home/ocode-2023/Desktop/Dashboard/Admin/src/pages/AllCharts/echart/gaugechart.js\";\nimport React, { Component } from \"react\";\nimport cloneDeep from \"lodash.clonedeep\";\nimport ReactEcharts from \"echarts-for-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Guage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getOption = () => {\n      return {\n        tooltip: {\n          formatter: \"{a} <br/>{b} : {c}%\"\n        },\n        toolbox: {\n          feature: {\n            restore: {},\n            saveAsImage: {}\n          }\n        },\n        series: [{\n          name: \"Business indicator\",\n          type: \"gauge\",\n          detail: {\n            formatter: \"{value}%\"\n          },\n          axisLine: {\n            lineStyle: {\n              color: [[0.2, \"#02a499\"], [0.8, \"#3c4ccf\"], [1, \"#ec4561\"]],\n              width: 20\n            }\n          },\n          data: [{\n            value: 50,\n            name: \"Completion rate\"\n          }]\n        }]\n      };\n    };\n\n    this.timeTicket = null;\n\n    this.getInitialState = () => ({\n      option: this.getOption()\n    });\n\n    this.state = this.getInitialState();\n  }\n\n  componentDidMount() {\n    if (this.timeTicket) {\n      clearInterval(this.timeTicket);\n    }\n\n    this.timeTicket = setInterval(() => {\n      const option = cloneDeep(this.state.option);\n      option.series[0].data.value = (Math.random() * 100).toFixed(2) - 0;\n      this.setState({\n        option: option\n      });\n    }, 2000);\n  }\n\n  componentWillUnmount() {\n    if (this.timeTicket) {\n      clearInterval(this.timeTicket);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ReactEcharts, {\n        style: {\n          height: \"350px\"\n        },\n        option: this.getOption()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Guage;","map":{"version":3,"sources":["/home/ocode-2023/Desktop/Dashboard/Admin/src/pages/AllCharts/echart/gaugechart.js"],"names":["React","Component","cloneDeep","ReactEcharts","Guage","constructor","props","getOption","tooltip","formatter","toolbox","feature","restore","saveAsImage","series","name","type","detail","axisLine","lineStyle","color","width","data","value","timeTicket","getInitialState","option","state","componentDidMount","clearInterval","setInterval","Math","random","toFixed","setState","componentWillUnmount","render","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;;;AAEA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAC5BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAKnBC,SALmB,GAKP,MAAM;AAChB,aAAO;AACLC,QAAAA,OAAO,EAAE;AACPC,UAAAA,SAAS,EAAE;AADJ,SADJ;AAILC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AACPC,YAAAA,OAAO,EAAE,EADF;AAEPC,YAAAA,WAAW,EAAE;AAFN;AADF,SAJJ;AAULC,QAAAA,MAAM,EAAE,CACN;AACEC,UAAAA,IAAI,EAAE,oBADR;AAEEC,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,MAAM,EAAE;AAAER,YAAAA,SAAS,EAAE;AAAb,WAHV;AAIES,UAAAA,QAAQ,EAAE;AACRC,YAAAA,SAAS,EAAE;AACTC,cAAAA,KAAK,EAAE,CACL,CAAC,GAAD,EAAM,SAAN,CADK,EAEL,CAAC,GAAD,EAAM,SAAN,CAFK,EAGL,CAAC,CAAD,EAAI,SAAJ,CAHK,CADE;AAMTC,cAAAA,KAAK,EAAE;AANE;AADH,WAJZ;AAcEC,UAAAA,IAAI,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAE,EAAT;AAAaR,YAAAA,IAAI,EAAE;AAAnB,WAAD;AAdR,SADM;AAVH,OAAP;AA6BD,KAnCkB;;AAAA,SAqCnBS,UArCmB,GAqCN,IArCM;;AAAA,SAsCnBC,eAtCmB,GAsCD,OAAO;AAAEC,MAAAA,MAAM,EAAE,KAAKnB,SAAL;AAAV,KAAP,CAtCC;;AAEjB,SAAKoB,KAAL,GAAa,KAAKF,eAAL,EAAb;AACD;;AAqCDG,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKJ,UAAT,EAAqB;AACnBK,MAAAA,aAAa,CAAC,KAAKL,UAAN,CAAb;AACD;;AACD,SAAKA,UAAL,GAAkBM,WAAW,CAAC,MAAM;AAClC,YAAMJ,MAAM,GAAGxB,SAAS,CAAC,KAAKyB,KAAL,CAAWD,MAAZ,CAAxB;AACAA,MAAAA,MAAM,CAACZ,MAAP,CAAc,CAAd,EAAiBQ,IAAjB,CAAsBC,KAAtB,GAA8B,CAACQ,IAAI,CAACC,MAAL,KAAgB,GAAjB,EAAsBC,OAAtB,CAA8B,CAA9B,IAAmC,CAAjE;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA,MAAM,EAAEA;AAAV,OAAd;AACD,KAJ4B,EAI1B,IAJ0B,CAA7B;AAKD;;AAEDS,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKX,UAAT,EAAqB;AACnBK,MAAAA,aAAa,CAAC,KAAKL,UAAN,CAAb;AACD;AACF;;AAEDY,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,6BACE,QAAC,YAAD;AAAc,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAArB;AAA0C,QAAA,MAAM,EAAE,KAAK9B,SAAL;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAhE2B;;AAkE9B,eAAeH,KAAf","sourcesContent":["import React, { Component } from \"react\"\nimport cloneDeep from \"lodash.clonedeep\"\nimport ReactEcharts from \"echarts-for-react\"\n\nclass Guage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = this.getInitialState()\n  }\n\n  getOption = () => {\n    return {\n      tooltip: {\n        formatter: \"{a} <br/>{b} : {c}%\",\n      },\n      toolbox: {\n        feature: {\n          restore: {},\n          saveAsImage: {},\n        },\n      },\n      series: [\n        {\n          name: \"Business indicator\",\n          type: \"gauge\",\n          detail: { formatter: \"{value}%\" },\n          axisLine: {\n            lineStyle: {\n              color: [\n                [0.2, \"#02a499\"],\n                [0.8, \"#3c4ccf\"],\n                [1, \"#ec4561\"],\n              ],\n              width: 20,\n            },\n          },\n          data: [{ value: 50, name: \"Completion rate\" }],\n        },\n      ],\n    }\n  }\n\n  timeTicket = null\n  getInitialState = () => ({ option: this.getOption() })\n\n  componentDidMount() {\n    if (this.timeTicket) {\n      clearInterval(this.timeTicket)\n    }\n    this.timeTicket = setInterval(() => {\n      const option = cloneDeep(this.state.option)\n      option.series[0].data.value = (Math.random() * 100).toFixed(2) - 0\n      this.setState({ option: option })\n    }, 2000)\n  }\n\n  componentWillUnmount() {\n    if (this.timeTicket) {\n      clearInterval(this.timeTicket)\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <ReactEcharts style={{ height: \"350px\" }} option={this.getOption()} />\n      </React.Fragment>\n    )\n  }\n}\nexport default Guage\n"]},"metadata":{},"sourceType":"module"}