{"ast":null,"code":"'use strict';\n\nvar hasOwn = require('hasown');\nvar newify = require('newify');\nvar assign = require('object-assign');\nvar EventEmitter = require('events').EventEmitter;\nvar inherits = require('./inherits');\nvar VALIDATE = require('./validate');\nvar objectToString = Object.prototype.toString;\nvar isObject = function (value) {\n  return objectToString.apply(value) === '[object Object]';\n};\nfunction copyList(source, target, list) {\n  if (source) {\n    list.forEach(function (key) {\n      if (hasOwn(source, key)) {\n        target[key] = source[key];\n      }\n    });\n  }\n  return target;\n}\n\n/**\n * @class Region\n *\n * The Region is an abstraction that allows the developer to refer to rectangles on the screen,\n * and move them around, make diffs and unions, detect intersections, compute areas, etc.\n *\n * ## Creating a region\n *      var region = require('region')({\n *          top  : 10,\n *          left : 10,\n *          bottom: 100,\n *          right : 100\n *      })\n *      //this region is a square, 90x90, starting from (10,10) to (100,100)\n *\n *      var second = require('region')({ top: 10, left: 100, right: 200, bottom: 60})\n *      var union  = region.getUnion(second)\n *\n *      //the \"union\" region is a union between \"region\" and \"second\"\n */\n\nvar POINT_POSITIONS = {\n  cy: 'YCenter',\n  cx: 'XCenter',\n  t: 'Top',\n  tc: 'TopCenter',\n  tl: 'TopLeft',\n  tr: 'TopRight',\n  b: 'Bottom',\n  bc: 'BottomCenter',\n  bl: 'BottomLeft',\n  br: 'BottomRight',\n  l: 'Left',\n  lc: 'LeftCenter',\n  r: 'Right',\n  rc: 'RightCenter',\n  c: 'Center'\n};\n\n/**\n * @constructor\n *\n * Construct a new Region.\n *\n * Example:\n *\n *      var r = new Region({ top: 10, left: 20, bottom: 100, right: 200 })\n *\n *      //or, the same, but with numbers (can be used with new or without)\n *\n *      r = Region(10, 200, 100, 20)\n *\n *      //or, with width and height\n *\n *      r = Region({ top: 10, left: 20, width: 180, height: 90})\n *\n * @param {Number|Object} top The top pixel position, or an object with top, left, bottom, right properties. If an object is passed,\n * instead of having bottom and right, it can have width and height.\n *\n * @param {Number} right The right pixel position\n * @param {Number} bottom The bottom pixel position\n * @param {Number} left The left pixel position\n *\n * @return {Region} this\n */\nvar REGION = function (top, right, bottom, left) {\n  if (!(this instanceof REGION)) {\n    return newify(REGION, arguments);\n  }\n  EventEmitter.call(this);\n  if (isObject(top)) {\n    copyList(top, this, ['top', 'right', 'bottom', 'left']);\n    if (top.bottom == null && top.height != null) {\n      this.bottom = this.top + top.height;\n    }\n    if (top.right == null && top.width != null) {\n      this.right = this.left + top.width;\n    }\n    if (top.emitChangeEvents) {\n      this.emitChangeEvents = top.emitChangeEvents;\n    }\n  } else {\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n    this.left = left;\n  }\n  this[0] = this.left;\n  this[1] = this.top;\n  VALIDATE(this);\n};\ninherits(REGION, EventEmitter);\nassign(REGION.prototype, {\n  /**\n   * @cfg {Boolean} emitChangeEvents If this is set to true, the region\n   * will emit 'changesize' and 'changeposition' whenever the size or the position changs\n   */\n  emitChangeEvents: false,\n  /**\n   * Returns this region, or a clone of this region\n   * @param  {Boolean} [clone] If true, this method will return a clone of this region\n   * @return {Region}       This region, or a clone of this\n   */\n  getRegion: function (clone) {\n    return clone ? this.clone() : this;\n  },\n  /**\n   * Sets the properties of this region to those of the given region\n   * @param {Region/Object} reg The region or object to use for setting properties of this region\n   * @return {Region} this\n   */\n  setRegion: function (reg) {\n    if (reg instanceof REGION) {\n      this.set(reg.get());\n    } else {\n      this.set(reg);\n    }\n    return this;\n  },\n  /**\n   * Returns true if this region is valid, false otherwise\n   *\n   * @param  {Region} region The region to check\n   * @return {Boolean}        True, if the region is valid, false otherwise.\n   * A region is valid if\n   *  * left <= right  &&\n   *  * top  <= bottom\n   */\n  validate: function () {\n    return REGION.validate(this);\n  },\n  _before: function () {\n    if (this.emitChangeEvents) {\n      return copyList(this, {}, ['left', 'top', 'bottom', 'right']);\n    }\n  },\n  _after: function (before) {\n    if (this.emitChangeEvents) {\n      if (this.top != before.top || this.left != before.left) {\n        this.emitPositionChange();\n      }\n      if (this.right != before.right || this.bottom != before.bottom) {\n        this.emitSizeChange();\n      }\n    }\n  },\n  notifyPositionChange: function () {\n    this.emit('changeposition', this);\n  },\n  emitPositionChange: function () {\n    this.notifyPositionChange();\n  },\n  notifySizeChange: function () {\n    this.emit('changesize', this);\n  },\n  emitSizeChange: function () {\n    this.notifySizeChange();\n  },\n  /**\n   * Add the given amounts to each specified side. Example\n   *\n   *      region.add({\n   *          top: 50,    //add 50 px to the top side\n   *          bottom: -100    //substract 100 px from the bottom side\n   *      })\n   *\n   * @param {Object} directions\n   * @param {Number} [directions.top]\n   * @param {Number} [directions.left]\n   * @param {Number} [directions.bottom]\n   * @param {Number} [directions.right]\n   *\n   * @return {Region} this\n   */\n  add: function (directions) {\n    var before = this._before();\n    var direction;\n    for (direction in directions) if (hasOwn(directions, direction)) {\n      this[direction] += directions[direction];\n    }\n    this[0] = this.left;\n    this[1] = this.top;\n    this._after(before);\n    return this;\n  },\n  /**\n   * The same as {@link #add}, but substracts the given values\n   * @param {Object} directions\n   * @param {Number} [directions.top]\n   * @param {Number} [directions.left]\n   * @param {Number} [directions.bottom]\n   * @param {Number} [directions.right]\n   *\n   * @return {Region} this\n   */\n  substract: function (directions) {\n    var before = this._before();\n    var direction;\n    for (direction in directions) if (hasOwn(directions, direction)) {\n      this[direction] -= directions[direction];\n    }\n    this[0] = this.left;\n    this[1] = this.top;\n    this._after(before);\n    return this;\n  },\n  /**\n   * Retrieves the size of the region.\n   * @return {Object} An object with {width, height}, corresponding to the width and height of the region\n   */\n  getSize: function () {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  },\n  /**\n   * Move the region to the given position and keeps the region width and height.\n   *\n   * @param {Object} position An object with {top, left} properties. The values in {top,left} are used to move the region by the given amounts.\n   * @param {Number} [position.left]\n   * @param {Number} [position.top]\n   *\n   * @return {Region} this\n   */\n  setPosition: function (position) {\n    var width = this.width;\n    var height = this.height;\n    if (position.left != undefined) {\n      position.right = position.left + width;\n    }\n    if (position.top != undefined) {\n      position.bottom = position.top + height;\n    }\n    return this.set(position);\n  },\n  /**\n   * Sets both the height and the width of this region to the given size.\n   *\n   * @param {Number} size The new size for the region\n   * @return {Region} this\n   */\n  setSize: function (size) {\n    if (size.height != undefined && size.width != undefined) {\n      return this.set({\n        right: this.left + size.width,\n        bottom: this.top + size.height\n      });\n    }\n    if (size.width != undefined) {\n      this.setWidth(size.width);\n    }\n    if (size.height != undefined) {\n      this.setHeight(size.height);\n    }\n    return this;\n  },\n  /**\n   * @chainable\n   *\n   * Sets the width of this region\n   * @param {Number} width The new width for this region\n   * @return {Region} this\n   */\n  setWidth: function (width) {\n    return this.set({\n      right: this.left + width\n    });\n  },\n  /**\n   * @chainable\n   *\n   * Sets the height of this region\n   * @param {Number} height The new height for this region\n   * @return {Region} this\n   */\n  setHeight: function (height) {\n    return this.set({\n      bottom: this.top + height\n    });\n  },\n  /**\n   * Sets the given properties on this region\n   *\n   * @param {Object} directions an object containing top, left, and EITHER bottom, right OR width, height\n   * @param {Number} [directions.top]\n   * @param {Number} [directions.left]\n   *\n   * @param {Number} [directions.bottom]\n   * @param {Number} [directions.right]\n   *\n   * @param {Number} [directions.width]\n   * @param {Number} [directions.height]\n   *\n   *\n   * @return {Region} this\n   */\n  set: function (directions) {\n    var before = this._before();\n    copyList(directions, this, ['left', 'top', 'bottom', 'right']);\n    if (directions.bottom == null && directions.height != null) {\n      this.bottom = this.top + directions.height;\n    }\n    if (directions.right == null && directions.width != null) {\n      this.right = this.left + directions.width;\n    }\n    this[0] = this.left;\n    this[1] = this.top;\n    this._after(before);\n    return this;\n  },\n  /**\n   * Retrieves the given property from this region. If no property is given, return an object\n   * with {left, top, right, bottom}\n   *\n   * @param {String} [dir] the property to retrieve from this region\n   * @return {Number/Object}\n   */\n  get: function (dir) {\n    return dir ? this[dir] : copyList(this, {}, ['left', 'right', 'top', 'bottom']);\n  },\n  /**\n   * Shifts this region to either top, or left or both.\n   * Shift is similar to {@link #add} by the fact that it adds the given dimensions to top/left sides, but also adds the given dimensions\n   * to bottom and right\n   *\n   * @param {Object} directions\n   * @param {Number} [directions.top]\n   * @param {Number} [directions.left]\n   *\n   * @return {Region} this\n   */\n  shift: function (directions) {\n    var before = this._before();\n    if (directions.top) {\n      this.top += directions.top;\n      this.bottom += directions.top;\n    }\n    if (directions.left) {\n      this.left += directions.left;\n      this.right += directions.left;\n    }\n    this[0] = this.left;\n    this[1] = this.top;\n    this._after(before);\n    return this;\n  },\n  /**\n   * Same as {@link #shift}, but substracts the given values\n   * @chainable\n   *\n   * @param {Object} directions\n   * @param {Number} [directions.top]\n   * @param {Number} [directions.left]\n   *\n   * @return {Region} this\n   */\n  unshift: function (directions) {\n    if (directions.top) {\n      directions.top *= -1;\n    }\n    if (directions.left) {\n      directions.left *= -1;\n    }\n    return this.shift(directions);\n  },\n  /**\n   * Compare this region and the given region. Return true if they have all the same size and position\n   * @param  {Region} region The region to compare with\n   * @return {Boolean}       True if this and region have same size and position\n   */\n  equals: function (region) {\n    return this.equalsPosition(region) && this.equalsSize(region);\n  },\n  /**\n   * Returns true if this region has the same bottom,right properties as the given region\n   * @param  {Region/Object} size The region to compare against\n   * @return {Boolean}       true if this region is the same size as the given size\n   */\n  equalsSize: function (size) {\n    var isInstance = size instanceof REGION;\n    var s = {\n      width: size.width == null && isInstance ? size.getWidth() : size.width,\n      height: size.height == null && isInstance ? size.getHeight() : size.height\n    };\n    return this.getWidth() == s.width && this.getHeight() == s.height;\n  },\n  /**\n   * Returns true if this region has the same top,left properties as the given region\n   * @param  {Region} region The region to compare against\n   * @return {Boolean}       true if this.top == region.top and this.left == region.left\n   */\n  equalsPosition: function (region) {\n    return this.top == region.top && this.left == region.left;\n  },\n  /**\n   * Adds the given ammount to the left side of this region\n   * @param {Number} left The ammount to add\n   * @return {Region} this\n   */\n  addLeft: function (left) {\n    var before = this._before();\n    this.left = this[0] = this.left + left;\n    this._after(before);\n    return this;\n  },\n  /**\n   * Adds the given ammount to the top side of this region\n   * @param {Number} top The ammount to add\n   * @return {Region} this\n   */\n  addTop: function (top) {\n    var before = this._before();\n    this.top = this[1] = this.top + top;\n    this._after(before);\n    return this;\n  },\n  /**\n   * Adds the given ammount to the bottom side of this region\n   * @param {Number} bottom The ammount to add\n   * @return {Region} this\n   */\n  addBottom: function (bottom) {\n    var before = this._before();\n    this.bottom += bottom;\n    this._after(before);\n    return this;\n  },\n  /**\n   * Adds the given ammount to the right side of this region\n   * @param {Number} right The ammount to add\n   * @return {Region} this\n   */\n  addRight: function (right) {\n    var before = this._before();\n    this.right += right;\n    this._after(before);\n    return this;\n  },\n  /**\n   * Minimize the top side.\n   * @return {Region} this\n   */\n  minTop: function () {\n    return this.expand({\n      top: 1\n    });\n  },\n  /**\n   * Minimize the bottom side.\n   * @return {Region} this\n   */\n  maxBottom: function () {\n    return this.expand({\n      bottom: 1\n    });\n  },\n  /**\n   * Minimize the left side.\n   * @return {Region} this\n   */\n  minLeft: function () {\n    return this.expand({\n      left: 1\n    });\n  },\n  /**\n   * Maximize the right side.\n   * @return {Region} this\n   */\n  maxRight: function () {\n    return this.expand({\n      right: 1\n    });\n  },\n  /**\n   * Expands this region to the dimensions of the given region, or the document region, if no region is expanded.\n   * But only expand the given sides (any of the four can be expanded).\n   *\n   * @param {Object} directions\n   * @param {Boolean} [directions.top]\n   * @param {Boolean} [directions.bottom]\n   * @param {Boolean} [directions.left]\n   * @param {Boolean} [directions.right]\n   *\n   * @param {Region} [region] the region to expand to, defaults to the document region\n   * @return {Region} this region\n   */\n  expand: function (directions, region) {\n    var docRegion = region || REGION.getDocRegion();\n    var list = [];\n    var direction;\n    var before = this._before();\n    for (direction in directions) if (hasOwn(directions, direction)) {\n      list.push(direction);\n    }\n    copyList(docRegion, this, list);\n    this[0] = this.left;\n    this[1] = this.top;\n    this._after(before);\n    return this;\n  },\n  /**\n   * Returns a clone of this region\n   * @return {Region} A new region, with the same position and dimension as this region\n   */\n  clone: function () {\n    return new REGION({\n      top: this.top,\n      left: this.left,\n      right: this.right,\n      bottom: this.bottom\n    });\n  },\n  /**\n   * Returns true if this region contains the given point\n   * @param {Number/Object} x the x coordinate of the point\n   * @param {Number} [y] the y coordinate of the point\n   *\n   * @return {Boolean} true if this region constains the given point, false otherwise\n   */\n  containsPoint: function (x, y) {\n    if (arguments.length == 1) {\n      y = x.y;\n      x = x.x;\n    }\n    return this.left <= x && x <= this.right && this.top <= y && y <= this.bottom;\n  },\n  /**\n   *\n   * @param region\n   *\n   * @return {Boolean} true if this region contains the given region, false otherwise\n   */\n  containsRegion: function (region) {\n    return this.containsPoint(region.left, region.top) && this.containsPoint(region.right, region.bottom);\n  },\n  /**\n   * Returns an object with the difference for {top, bottom} positions betwen this and the given region,\n   *\n   * See {@link #diff}\n   * @param  {Region} region The region to use for diff\n   * @return {Object}        {top,bottom}\n   */\n  diffHeight: function (region) {\n    return this.diff(region, {\n      top: true,\n      bottom: true\n    });\n  },\n  /**\n   * Returns an object with the difference for {left, right} positions betwen this and the given region,\n   *\n   * See {@link #diff}\n   * @param  {Region} region The region to use for diff\n   * @return {Object}        {left,right}\n   */\n  diffWidth: function (region) {\n    return this.diff(region, {\n      left: true,\n      right: true\n    });\n  },\n  /**\n   * Returns an object with the difference in sizes for the given directions, between this and region\n   *\n   * @param  {Region} region     The region to use for diff\n   * @param  {Object} directions An object with the directions to diff. Can have any of the following keys:\n   *  * left\n   *  * right\n   *  * top\n   *  * bottom\n   *\n   * @return {Object} and object with the same keys as the directions object, but the values being the\n   * differences between this region and the given region\n   */\n  diff: function (region, directions) {\n    var result = {};\n    var dirName;\n    for (dirName in directions) if (hasOwn(directions, dirName)) {\n      result[dirName] = this[dirName] - region[dirName];\n    }\n    return result;\n  },\n  /**\n   * Returns the position, in {left,top} properties, of this region\n   *\n   * @return {Object} {left,top}\n   */\n  getPosition: function () {\n    return {\n      left: this.left,\n      top: this.top\n    };\n  },\n  /**\n   * Returns the point at the given position from this region.\n   *\n   * @param {String} position Any of:\n   *\n   *  * 'cx' - See {@link #getPointXCenter}\n   *  * 'cy' - See {@link #getPointYCenter}\n   *  * 'b'  - See {@link #getPointBottom}\n   *  * 'bc' - See {@link #getPointBottomCenter}\n   *  * 'l'  - See {@link #getPointLeft}F\n   *  * 'lc' - See {@link #getPointLeftCenter}\n   *  * 't'  - See {@link #getPointTop}\n   *  * 'tc' - See {@link #getPointTopCenter}\n   *  * 'r'  - See {@link #getPointRight}\n   *  * 'rc' - See {@link #getPointRightCenter}\n   *  * 'c'  - See {@link #getPointCenter}\n   *  * 'tl' - See {@link #getPointTopLeft}\n   *  * 'bl' - See {@link #getPointBottomLeft}\n   *  * 'br' - See {@link #getPointBottomRight}\n   *  * 'tr' - See {@link #getPointTopRight}\n   *\n   * @param {Boolean} asLeftTop\n   *\n   * @return {Object} either an object with {x,y} or {left,top} if asLeftTop is true\n   */\n  getPoint: function (position, asLeftTop) {\n    //<debug>\n    if (!POINT_POSITIONS[position]) {\n      console.warn('The position ', position, ' could not be found! Available options are tl, bl, tr, br, l, r, t, b.');\n    }\n    //</debug>\n\n    var method = 'getPoint' + POINT_POSITIONS[position],\n      result = this[method]();\n    if (asLeftTop) {\n      return {\n        left: result.x,\n        top: result.y\n      };\n    }\n    return result;\n  },\n  /**\n   * Returns a point with x = null and y being the middle of the left region segment\n   * @return {Object} {x,y}\n   */\n  getPointYCenter: function () {\n    return {\n      x: null,\n      y: this.top + this.getHeight() / 2\n    };\n  },\n  /**\n   * Returns a point with y = null and x being the middle of the top region segment\n   * @return {Object} {x,y}\n   */\n  getPointXCenter: function () {\n    return {\n      x: this.left + this.getWidth() / 2,\n      y: null\n    };\n  },\n  /**\n   * Returns a point with x = null and y the region top position on the y axis\n   * @return {Object} {x,y}\n   */\n  getPointTop: function () {\n    return {\n      x: null,\n      y: this.top\n    };\n  },\n  /**\n   * Returns a point that is the middle point of the region top segment\n   * @return {Object} {x,y}\n   */\n  getPointTopCenter: function () {\n    return {\n      x: this.left + this.getWidth() / 2,\n      y: this.top\n    };\n  },\n  /**\n   * Returns a point that is the top-left point of the region\n   * @return {Object} {x,y}\n   */\n  getPointTopLeft: function () {\n    return {\n      x: this.left,\n      y: this.top\n    };\n  },\n  /**\n   * Returns a point that is the top-right point of the region\n   * @return {Object} {x,y}\n   */\n  getPointTopRight: function () {\n    return {\n      x: this.right,\n      y: this.top\n    };\n  },\n  /**\n   * Returns a point with x = null and y the region bottom position on the y axis\n   * @return {Object} {x,y}\n   */\n  getPointBottom: function () {\n    return {\n      x: null,\n      y: this.bottom\n    };\n  },\n  /**\n   * Returns a point that is the middle point of the region bottom segment\n   * @return {Object} {x,y}\n   */\n  getPointBottomCenter: function () {\n    return {\n      x: this.left + this.getWidth() / 2,\n      y: this.bottom\n    };\n  },\n  /**\n   * Returns a point that is the bottom-left point of the region\n   * @return {Object} {x,y}\n   */\n  getPointBottomLeft: function () {\n    return {\n      x: this.left,\n      y: this.bottom\n    };\n  },\n  /**\n   * Returns a point that is the bottom-right point of the region\n   * @return {Object} {x,y}\n   */\n  getPointBottomRight: function () {\n    return {\n      x: this.right,\n      y: this.bottom\n    };\n  },\n  /**\n   * Returns a point with y = null and x the region left position on the x axis\n   * @return {Object} {x,y}\n   */\n  getPointLeft: function () {\n    return {\n      x: this.left,\n      y: null\n    };\n  },\n  /**\n   * Returns a point that is the middle point of the region left segment\n   * @return {Object} {x,y}\n   */\n  getPointLeftCenter: function () {\n    return {\n      x: this.left,\n      y: this.top + this.getHeight() / 2\n    };\n  },\n  /**\n   * Returns a point with y = null and x the region right position on the x axis\n   * @return {Object} {x,y}\n   */\n  getPointRight: function () {\n    return {\n      x: this.right,\n      y: null\n    };\n  },\n  /**\n   * Returns a point that is the middle point of the region right segment\n   * @return {Object} {x,y}\n   */\n  getPointRightCenter: function () {\n    return {\n      x: this.right,\n      y: this.top + this.getHeight() / 2\n    };\n  },\n  /**\n   * Returns a point that is the center of the region\n   * @return {Object} {x,y}\n   */\n  getPointCenter: function () {\n    return {\n      x: this.left + this.getWidth() / 2,\n      y: this.top + this.getHeight() / 2\n    };\n  },\n  /**\n   * @return {Number} returns the height of the region\n   */\n  getHeight: function () {\n    return this.bottom - this.top;\n  },\n  /**\n   * @return {Number} returns the width of the region\n   */\n  getWidth: function () {\n    return this.right - this.left;\n  },\n  /**\n   * @return {Number} returns the top property of the region\n   */\n  getTop: function () {\n    return this.top;\n  },\n  /**\n   * @return {Number} returns the left property of the region\n   */\n  getLeft: function () {\n    return this.left;\n  },\n  /**\n   * @return {Number} returns the bottom property of the region\n   */\n  getBottom: function () {\n    return this.bottom;\n  },\n  /**\n   * @return {Number} returns the right property of the region\n   */\n  getRight: function () {\n    return this.right;\n  },\n  /**\n   * Returns the area of the region\n   * @return {Number} the computed area\n   */\n  getArea: function () {\n    return this.getWidth() * this.getHeight();\n  },\n  constrainTo: function (contrain) {\n    var intersect = this.getIntersection(contrain);\n    var shift;\n    if (!intersect || !intersect.equals(this)) {\n      var contrainWidth = contrain.getWidth(),\n        contrainHeight = contrain.getHeight();\n      if (this.getWidth() > contrainWidth) {\n        this.left = contrain.left;\n        this.setWidth(contrainWidth);\n      }\n      if (this.getHeight() > contrainHeight) {\n        this.top = contrain.top;\n        this.setHeight(contrainHeight);\n      }\n      shift = {};\n      if (this.right > contrain.right) {\n        shift.left = contrain.right - this.right;\n      }\n      if (this.bottom > contrain.bottom) {\n        shift.top = contrain.bottom - this.bottom;\n      }\n      if (this.left < contrain.left) {\n        shift.left = contrain.left - this.left;\n      }\n      if (this.top < contrain.top) {\n        shift.top = contrain.top - this.top;\n      }\n      this.shift(shift);\n      return true;\n    }\n    return false;\n  },\n  __IS_REGION: true\n\n  /**\n   * @property {Number} top\n   */\n\n  /**\n   * @property {Number} right\n   */\n\n  /**\n   * @property {Number} bottom\n   */\n\n  /**\n   * @property {Number} left\n   */\n\n  /**\n   * @property {Number} [0] the top property\n   */\n\n  /**\n   * @property {Number} [1] the left property\n   */\n\n  /**\n   * @method getIntersection\n   * Returns a region that is the intersection of this region and the given region\n   * @param  {Region} region The region to intersect with\n   * @return {Region}        The intersection region\n   */\n\n  /**\n   * @method getUnion\n   * Returns a region that is the union of this region with the given region\n   * @param  {Region} region  The region to make union with\n   * @return {Region}        The union region. The smallest region that contains both this and the given region.\n   */\n});\n\nObject.defineProperties(REGION.prototype, {\n  width: {\n    get: function () {\n      return this.getWidth();\n    },\n    set: function (width) {\n      return this.setWidth(width);\n    }\n  },\n  height: {\n    get: function () {\n      return this.getHeight();\n    },\n    set: function (height) {\n      return this.setHeight(height);\n    }\n  }\n});\nrequire('./statics')(REGION);\nmodule.exports = REGION;","map":{"version":3,"names":["hasOwn","require","newify","assign","EventEmitter","inherits","VALIDATE","objectToString","Object","prototype","toString","isObject","value","apply","copyList","source","target","list","forEach","key","POINT_POSITIONS","cy","cx","t","tc","tl","tr","b","bc","bl","br","l","lc","r","rc","c","REGION","top","right","bottom","left","arguments","call","height","width","emitChangeEvents","getRegion","clone","setRegion","reg","set","get","validate","_before","_after","before","emitPositionChange","emitSizeChange","notifyPositionChange","emit","notifySizeChange","add","directions","direction","substract","getSize","setPosition","position","undefined","setSize","size","setWidth","setHeight","dir","shift","unshift","equals","region","equalsPosition","equalsSize","isInstance","s","getWidth","getHeight","addLeft","addTop","addBottom","addRight","minTop","expand","maxBottom","minLeft","maxRight","docRegion","getDocRegion","push","containsPoint","x","y","length","containsRegion","diffHeight","diff","diffWidth","result","dirName","getPosition","getPoint","asLeftTop","console","warn","method","getPointYCenter","getPointXCenter","getPointTop","getPointTopCenter","getPointTopLeft","getPointTopRight","getPointBottom","getPointBottomCenter","getPointBottomLeft","getPointBottomRight","getPointLeft","getPointLeftCenter","getPointRight","getPointRightCenter","getPointCenter","getTop","getLeft","getBottom","getRight","getArea","constrainTo","contrain","intersect","getIntersection","contrainWidth","contrainHeight","__IS_REGION","defineProperties","module","exports"],"sources":["/home/ocode-2023/Desktop/Dashboard/Admin/node_modules/region/src/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn    = require('hasown')\nvar newify    = require('newify')\n\nvar assign      = require('object-assign');\nvar EventEmitter = require('events').EventEmitter\n\nvar inherits = require('./inherits')\nvar VALIDATE = require('./validate')\n\nvar objectToString = Object.prototype.toString\n\nvar isObject = function(value){\n    return objectToString.apply(value) === '[object Object]'\n}\n\nfunction copyList(source, target, list){\n    if (source){\n        list.forEach(function(key){\n            if (hasOwn(source, key)){\n                target[key] = source[key]\n            }\n        })\n    }\n\n    return target\n}\n\n/**\n * @class Region\n *\n * The Region is an abstraction that allows the developer to refer to rectangles on the screen,\n * and move them around, make diffs and unions, detect intersections, compute areas, etc.\n *\n * ## Creating a region\n *      var region = require('region')({\n *          top  : 10,\n *          left : 10,\n *          bottom: 100,\n *          right : 100\n *      })\n *      //this region is a square, 90x90, starting from (10,10) to (100,100)\n *\n *      var second = require('region')({ top: 10, left: 100, right: 200, bottom: 60})\n *      var union  = region.getUnion(second)\n *\n *      //the \"union\" region is a union between \"region\" and \"second\"\n */\n\nvar POINT_POSITIONS = {\n        cy: 'YCenter',\n        cx: 'XCenter',\n        t : 'Top',\n        tc: 'TopCenter',\n        tl: 'TopLeft',\n        tr: 'TopRight',\n        b : 'Bottom',\n        bc: 'BottomCenter',\n        bl: 'BottomLeft',\n        br: 'BottomRight',\n        l : 'Left',\n        lc: 'LeftCenter',\n        r : 'Right',\n        rc: 'RightCenter',\n        c : 'Center'\n    }\n\n/**\n * @constructor\n *\n * Construct a new Region.\n *\n * Example:\n *\n *      var r = new Region({ top: 10, left: 20, bottom: 100, right: 200 })\n *\n *      //or, the same, but with numbers (can be used with new or without)\n *\n *      r = Region(10, 200, 100, 20)\n *\n *      //or, with width and height\n *\n *      r = Region({ top: 10, left: 20, width: 180, height: 90})\n *\n * @param {Number|Object} top The top pixel position, or an object with top, left, bottom, right properties. If an object is passed,\n * instead of having bottom and right, it can have width and height.\n *\n * @param {Number} right The right pixel position\n * @param {Number} bottom The bottom pixel position\n * @param {Number} left The left pixel position\n *\n * @return {Region} this\n */\nvar REGION = function(top, right, bottom, left){\n\n    if (!(this instanceof REGION)){\n        return newify(REGION, arguments)\n    }\n\n    EventEmitter.call(this)\n\n    if (isObject(top)){\n        copyList(top, this, ['top','right','bottom','left'])\n\n        if (top.bottom == null && top.height != null){\n            this.bottom = this.top + top.height\n        }\n        if (top.right == null && top.width != null){\n            this.right = this.left + top.width\n        }\n\n        if (top.emitChangeEvents){\n            this.emitChangeEvents = top.emitChangeEvents\n        }\n    } else {\n        this.top    = top\n        this.right  = right\n        this.bottom = bottom\n        this.left   = left\n    }\n\n    this[0] = this.left\n    this[1] = this.top\n\n    VALIDATE(this)\n}\n\ninherits(REGION, EventEmitter)\n\nassign(REGION.prototype, {\n\n    /**\n     * @cfg {Boolean} emitChangeEvents If this is set to true, the region\n     * will emit 'changesize' and 'changeposition' whenever the size or the position changs\n     */\n    emitChangeEvents: false,\n\n    /**\n     * Returns this region, or a clone of this region\n     * @param  {Boolean} [clone] If true, this method will return a clone of this region\n     * @return {Region}       This region, or a clone of this\n     */\n    getRegion: function(clone){\n        return clone?\n                    this.clone():\n                    this\n    },\n\n    /**\n     * Sets the properties of this region to those of the given region\n     * @param {Region/Object} reg The region or object to use for setting properties of this region\n     * @return {Region} this\n     */\n    setRegion: function(reg){\n\n        if (reg instanceof REGION){\n            this.set(reg.get())\n        } else {\n            this.set(reg)\n        }\n\n        return this\n    },\n\n    /**\n     * Returns true if this region is valid, false otherwise\n     *\n     * @param  {Region} region The region to check\n     * @return {Boolean}        True, if the region is valid, false otherwise.\n     * A region is valid if\n     *  * left <= right  &&\n     *  * top  <= bottom\n     */\n    validate: function(){\n        return REGION.validate(this)\n    },\n\n    _before: function(){\n        if (this.emitChangeEvents){\n            return copyList(this, {}, ['left','top','bottom','right'])\n        }\n    },\n\n    _after: function(before){\n        if (this.emitChangeEvents){\n\n            if(this.top != before.top || this.left != before.left) {\n                this.emitPositionChange()\n            }\n\n            if(this.right != before.right || this.bottom != before.bottom) {\n                this.emitSizeChange()\n            }\n        }\n    },\n\n    notifyPositionChange: function(){\n        this.emit('changeposition', this)\n    },\n\n    emitPositionChange: function(){\n        this.notifyPositionChange()\n    },\n\n    notifySizeChange: function(){\n        this.emit('changesize', this)\n    },\n\n    emitSizeChange: function(){\n        this.notifySizeChange()\n    },\n\n    /**\n     * Add the given amounts to each specified side. Example\n     *\n     *      region.add({\n     *          top: 50,    //add 50 px to the top side\n     *          bottom: -100    //substract 100 px from the bottom side\n     *      })\n     *\n     * @param {Object} directions\n     * @param {Number} [directions.top]\n     * @param {Number} [directions.left]\n     * @param {Number} [directions.bottom]\n     * @param {Number} [directions.right]\n     *\n     * @return {Region} this\n     */\n    add: function(directions){\n\n        var before = this._before()\n        var direction\n\n        for (direction in directions) if ( hasOwn(directions, direction) ) {\n            this[direction] += directions[direction]\n        }\n\n        this[0] = this.left\n        this[1] = this.top\n\n        this._after(before)\n\n        return this\n    },\n\n    /**\n     * The same as {@link #add}, but substracts the given values\n     * @param {Object} directions\n     * @param {Number} [directions.top]\n     * @param {Number} [directions.left]\n     * @param {Number} [directions.bottom]\n     * @param {Number} [directions.right]\n     *\n     * @return {Region} this\n     */\n    substract: function(directions){\n\n        var before = this._before()\n        var direction\n\n        for (direction in directions) if (hasOwn(directions, direction) ) {\n            this[direction] -= directions[direction]\n        }\n\n        this[0] = this.left\n        this[1] = this.top\n\n        this._after(before)\n\n        return this\n    },\n\n    /**\n     * Retrieves the size of the region.\n     * @return {Object} An object with {width, height}, corresponding to the width and height of the region\n     */\n    getSize: function(){\n        return {\n            width  : this.width,\n            height : this.height\n        }\n    },\n\n    /**\n     * Move the region to the given position and keeps the region width and height.\n     *\n     * @param {Object} position An object with {top, left} properties. The values in {top,left} are used to move the region by the given amounts.\n     * @param {Number} [position.left]\n     * @param {Number} [position.top]\n     *\n     * @return {Region} this\n     */\n    setPosition: function(position){\n        var width  = this.width\n        var height = this.height\n\n        if (position.left != undefined){\n            position.right  = position.left + width\n        }\n\n        if (position.top != undefined){\n            position.bottom = position.top  + height\n        }\n\n        return this.set(position)\n    },\n\n    /**\n     * Sets both the height and the width of this region to the given size.\n     *\n     * @param {Number} size The new size for the region\n     * @return {Region} this\n     */\n    setSize: function(size){\n        if (size.height != undefined && size.width != undefined){\n            return this.set({\n                right  : this.left + size.width,\n                bottom : this.top  + size.height\n            })\n        }\n\n        if (size.width != undefined){\n            this.setWidth(size.width)\n        }\n\n        if (size.height != undefined){\n            this.setHeight(size.height)\n        }\n\n        return this\n    },\n\n\n\n    /**\n     * @chainable\n     *\n     * Sets the width of this region\n     * @param {Number} width The new width for this region\n     * @return {Region} this\n     */\n    setWidth: function(width){\n        return this.set({\n            right: this.left + width\n        })\n    },\n\n    /**\n     * @chainable\n     *\n     * Sets the height of this region\n     * @param {Number} height The new height for this region\n     * @return {Region} this\n     */\n    setHeight: function(height){\n        return this.set({\n            bottom: this.top + height\n        })\n    },\n\n    /**\n     * Sets the given properties on this region\n     *\n     * @param {Object} directions an object containing top, left, and EITHER bottom, right OR width, height\n     * @param {Number} [directions.top]\n     * @param {Number} [directions.left]\n     *\n     * @param {Number} [directions.bottom]\n     * @param {Number} [directions.right]\n     *\n     * @param {Number} [directions.width]\n     * @param {Number} [directions.height]\n     *\n     *\n     * @return {Region} this\n     */\n    set: function(directions){\n        var before = this._before()\n\n        copyList(directions, this, ['left','top','bottom','right'])\n\n        if (directions.bottom == null && directions.height != null){\n            this.bottom = this.top + directions.height\n        }\n        if (directions.right == null && directions.width != null){\n            this.right = this.left + directions.width\n        }\n\n        this[0] = this.left\n        this[1] = this.top\n\n        this._after(before)\n\n        return this\n    },\n\n    /**\n     * Retrieves the given property from this region. If no property is given, return an object\n     * with {left, top, right, bottom}\n     *\n     * @param {String} [dir] the property to retrieve from this region\n     * @return {Number/Object}\n     */\n    get: function(dir){\n        return dir? this[dir]:\n                    copyList(this, {}, ['left','right','top','bottom'])\n    },\n\n    /**\n     * Shifts this region to either top, or left or both.\n     * Shift is similar to {@link #add} by the fact that it adds the given dimensions to top/left sides, but also adds the given dimensions\n     * to bottom and right\n     *\n     * @param {Object} directions\n     * @param {Number} [directions.top]\n     * @param {Number} [directions.left]\n     *\n     * @return {Region} this\n     */\n    shift: function(directions){\n\n        var before = this._before()\n\n        if (directions.top){\n            this.top    += directions.top\n            this.bottom += directions.top\n        }\n\n        if (directions.left){\n            this.left  += directions.left\n            this.right += directions.left\n        }\n\n        this[0] = this.left\n        this[1] = this.top\n\n        this._after(before)\n\n        return this\n    },\n\n    /**\n     * Same as {@link #shift}, but substracts the given values\n     * @chainable\n     *\n     * @param {Object} directions\n     * @param {Number} [directions.top]\n     * @param {Number} [directions.left]\n     *\n     * @return {Region} this\n     */\n    unshift: function(directions){\n\n        if (directions.top){\n            directions.top *= -1\n        }\n\n        if (directions.left){\n            directions.left *= -1\n        }\n\n        return this.shift(directions)\n    },\n\n    /**\n     * Compare this region and the given region. Return true if they have all the same size and position\n     * @param  {Region} region The region to compare with\n     * @return {Boolean}       True if this and region have same size and position\n     */\n    equals: function(region){\n        return this.equalsPosition(region) && this.equalsSize(region)\n    },\n\n    /**\n     * Returns true if this region has the same bottom,right properties as the given region\n     * @param  {Region/Object} size The region to compare against\n     * @return {Boolean}       true if this region is the same size as the given size\n     */\n    equalsSize: function(size){\n        var isInstance = size instanceof REGION\n\n        var s = {\n            width: size.width == null && isInstance?\n                    size.getWidth():\n                    size.width,\n\n            height: size.height == null && isInstance?\n                    size.getHeight():\n                    size.height\n        }\n        return this.getWidth() == s.width && this.getHeight() == s.height\n    },\n\n    /**\n     * Returns true if this region has the same top,left properties as the given region\n     * @param  {Region} region The region to compare against\n     * @return {Boolean}       true if this.top == region.top and this.left == region.left\n     */\n    equalsPosition: function(region){\n        return this.top == region.top && this.left == region.left\n    },\n\n    /**\n     * Adds the given ammount to the left side of this region\n     * @param {Number} left The ammount to add\n     * @return {Region} this\n     */\n    addLeft: function(left){\n        var before = this._before()\n\n        this.left = this[0] = this.left + left\n\n        this._after(before)\n\n        return this\n    },\n\n    /**\n     * Adds the given ammount to the top side of this region\n     * @param {Number} top The ammount to add\n     * @return {Region} this\n     */\n    addTop: function(top){\n        var before = this._before()\n\n        this.top = this[1] = this.top + top\n\n        this._after(before)\n\n        return this\n    },\n\n    /**\n     * Adds the given ammount to the bottom side of this region\n     * @param {Number} bottom The ammount to add\n     * @return {Region} this\n     */\n    addBottom: function(bottom){\n        var before = this._before()\n\n        this.bottom += bottom\n\n        this._after(before)\n\n        return this\n    },\n\n    /**\n     * Adds the given ammount to the right side of this region\n     * @param {Number} right The ammount to add\n     * @return {Region} this\n     */\n    addRight: function(right){\n        var before = this._before()\n\n        this.right += right\n\n        this._after(before)\n\n        return this\n    },\n\n    /**\n     * Minimize the top side.\n     * @return {Region} this\n     */\n    minTop: function(){\n        return this.expand({top: 1})\n    },\n    /**\n     * Minimize the bottom side.\n     * @return {Region} this\n     */\n    maxBottom: function(){\n        return this.expand({bottom: 1})\n    },\n    /**\n     * Minimize the left side.\n     * @return {Region} this\n     */\n    minLeft: function(){\n        return this.expand({left: 1})\n    },\n    /**\n     * Maximize the right side.\n     * @return {Region} this\n     */\n    maxRight: function(){\n        return this.expand({right: 1})\n    },\n\n    /**\n     * Expands this region to the dimensions of the given region, or the document region, if no region is expanded.\n     * But only expand the given sides (any of the four can be expanded).\n     *\n     * @param {Object} directions\n     * @param {Boolean} [directions.top]\n     * @param {Boolean} [directions.bottom]\n     * @param {Boolean} [directions.left]\n     * @param {Boolean} [directions.right]\n     *\n     * @param {Region} [region] the region to expand to, defaults to the document region\n     * @return {Region} this region\n     */\n    expand: function(directions, region){\n        var docRegion = region || REGION.getDocRegion()\n        var list      = []\n        var direction\n        var before = this._before()\n\n        for (direction in directions) if ( hasOwn(directions, direction) ) {\n            list.push(direction)\n        }\n\n        copyList(docRegion, this, list)\n\n        this[0] = this.left\n        this[1] = this.top\n\n        this._after(before)\n\n        return this\n    },\n\n    /**\n     * Returns a clone of this region\n     * @return {Region} A new region, with the same position and dimension as this region\n     */\n    clone: function(){\n        return new REGION({\n                    top    : this.top,\n                    left   : this.left,\n                    right  : this.right,\n                    bottom : this.bottom\n                })\n    },\n\n    /**\n     * Returns true if this region contains the given point\n     * @param {Number/Object} x the x coordinate of the point\n     * @param {Number} [y] the y coordinate of the point\n     *\n     * @return {Boolean} true if this region constains the given point, false otherwise\n     */\n    containsPoint: function(x, y){\n        if (arguments.length == 1){\n            y = x.y\n            x = x.x\n        }\n\n        return this.left <= x  &&\n               x <= this.right &&\n               this.top <= y   &&\n               y <= this.bottom\n    },\n\n    /**\n     *\n     * @param region\n     *\n     * @return {Boolean} true if this region contains the given region, false otherwise\n     */\n    containsRegion: function(region){\n        return this.containsPoint(region.left, region.top)    &&\n               this.containsPoint(region.right, region.bottom)\n    },\n\n    /**\n     * Returns an object with the difference for {top, bottom} positions betwen this and the given region,\n     *\n     * See {@link #diff}\n     * @param  {Region} region The region to use for diff\n     * @return {Object}        {top,bottom}\n     */\n    diffHeight: function(region){\n        return this.diff(region, {top: true, bottom: true})\n    },\n\n    /**\n     * Returns an object with the difference for {left, right} positions betwen this and the given region,\n     *\n     * See {@link #diff}\n     * @param  {Region} region The region to use for diff\n     * @return {Object}        {left,right}\n     */\n    diffWidth: function(region){\n        return this.diff(region, {left: true, right: true})\n    },\n\n    /**\n     * Returns an object with the difference in sizes for the given directions, between this and region\n     *\n     * @param  {Region} region     The region to use for diff\n     * @param  {Object} directions An object with the directions to diff. Can have any of the following keys:\n     *  * left\n     *  * right\n     *  * top\n     *  * bottom\n     *\n     * @return {Object} and object with the same keys as the directions object, but the values being the\n     * differences between this region and the given region\n     */\n    diff: function(region, directions){\n        var result = {}\n        var dirName\n\n        for (dirName in directions) if ( hasOwn(directions, dirName) ) {\n            result[dirName] = this[dirName] - region[dirName]\n        }\n\n        return result\n    },\n\n    /**\n     * Returns the position, in {left,top} properties, of this region\n     *\n     * @return {Object} {left,top}\n     */\n    getPosition: function(){\n        return {\n            left: this.left,\n            top : this.top\n        }\n    },\n\n    /**\n     * Returns the point at the given position from this region.\n     *\n     * @param {String} position Any of:\n     *\n     *  * 'cx' - See {@link #getPointXCenter}\n     *  * 'cy' - See {@link #getPointYCenter}\n     *  * 'b'  - See {@link #getPointBottom}\n     *  * 'bc' - See {@link #getPointBottomCenter}\n     *  * 'l'  - See {@link #getPointLeft}F\n     *  * 'lc' - See {@link #getPointLeftCenter}\n     *  * 't'  - See {@link #getPointTop}\n     *  * 'tc' - See {@link #getPointTopCenter}\n     *  * 'r'  - See {@link #getPointRight}\n     *  * 'rc' - See {@link #getPointRightCenter}\n     *  * 'c'  - See {@link #getPointCenter}\n     *  * 'tl' - See {@link #getPointTopLeft}\n     *  * 'bl' - See {@link #getPointBottomLeft}\n     *  * 'br' - See {@link #getPointBottomRight}\n     *  * 'tr' - See {@link #getPointTopRight}\n     *\n     * @param {Boolean} asLeftTop\n     *\n     * @return {Object} either an object with {x,y} or {left,top} if asLeftTop is true\n     */\n    getPoint: function(position, asLeftTop){\n\n        //<debug>\n        if (!POINT_POSITIONS[position]) {\n            console.warn('The position ', position, ' could not be found! Available options are tl, bl, tr, br, l, r, t, b.');\n        }\n        //</debug>\n\n        var method = 'getPoint' + POINT_POSITIONS[position],\n            result = this[method]()\n\n        if (asLeftTop){\n            return {\n                left : result.x,\n                top  : result.y\n            }\n        }\n\n        return result\n    },\n\n    /**\n     * Returns a point with x = null and y being the middle of the left region segment\n     * @return {Object} {x,y}\n     */\n    getPointYCenter: function(){\n        return { x: null, y: this.top + this.getHeight() / 2 }\n    },\n\n    /**\n     * Returns a point with y = null and x being the middle of the top region segment\n     * @return {Object} {x,y}\n     */\n    getPointXCenter: function(){\n        return { x: this.left + this.getWidth() / 2, y: null }\n    },\n\n    /**\n     * Returns a point with x = null and y the region top position on the y axis\n     * @return {Object} {x,y}\n     */\n    getPointTop: function(){\n        return { x: null, y: this.top }\n    },\n\n    /**\n     * Returns a point that is the middle point of the region top segment\n     * @return {Object} {x,y}\n     */\n    getPointTopCenter: function(){\n        return { x: this.left + this.getWidth() / 2, y: this.top }\n    },\n\n    /**\n     * Returns a point that is the top-left point of the region\n     * @return {Object} {x,y}\n     */\n    getPointTopLeft: function(){\n        return { x: this.left, y: this.top}\n    },\n\n    /**\n     * Returns a point that is the top-right point of the region\n     * @return {Object} {x,y}\n     */\n    getPointTopRight: function(){\n        return { x: this.right, y: this.top}\n    },\n\n    /**\n     * Returns a point with x = null and y the region bottom position on the y axis\n     * @return {Object} {x,y}\n     */\n    getPointBottom: function(){\n        return { x: null, y: this.bottom }\n    },\n\n    /**\n     * Returns a point that is the middle point of the region bottom segment\n     * @return {Object} {x,y}\n     */\n    getPointBottomCenter: function(){\n        return { x: this.left + this.getWidth() / 2, y: this.bottom }\n    },\n\n    /**\n     * Returns a point that is the bottom-left point of the region\n     * @return {Object} {x,y}\n     */\n    getPointBottomLeft: function(){\n        return { x: this.left, y: this.bottom}\n    },\n\n    /**\n     * Returns a point that is the bottom-right point of the region\n     * @return {Object} {x,y}\n     */\n    getPointBottomRight: function(){\n        return { x: this.right, y: this.bottom}\n    },\n\n    /**\n     * Returns a point with y = null and x the region left position on the x axis\n     * @return {Object} {x,y}\n     */\n    getPointLeft: function(){\n        return { x: this.left, y: null }\n    },\n\n    /**\n     * Returns a point that is the middle point of the region left segment\n     * @return {Object} {x,y}\n     */\n    getPointLeftCenter: function(){\n        return { x: this.left, y: this.top + this.getHeight() / 2 }\n    },\n\n    /**\n     * Returns a point with y = null and x the region right position on the x axis\n     * @return {Object} {x,y}\n     */\n    getPointRight: function(){\n        return { x: this.right, y: null }\n    },\n\n    /**\n     * Returns a point that is the middle point of the region right segment\n     * @return {Object} {x,y}\n     */\n    getPointRightCenter: function(){\n        return { x: this.right, y: this.top + this.getHeight() / 2 }\n    },\n\n    /**\n     * Returns a point that is the center of the region\n     * @return {Object} {x,y}\n     */\n    getPointCenter: function(){\n        return { x: this.left + this.getWidth() / 2, y: this.top + this.getHeight() / 2 }\n    },\n\n    /**\n     * @return {Number} returns the height of the region\n     */\n    getHeight: function(){\n        return this.bottom - this.top\n    },\n\n    /**\n     * @return {Number} returns the width of the region\n     */\n    getWidth: function(){\n        return this.right - this.left\n    },\n\n    /**\n     * @return {Number} returns the top property of the region\n     */\n    getTop: function(){\n        return this.top\n    },\n\n    /**\n     * @return {Number} returns the left property of the region\n     */\n    getLeft: function(){\n        return this.left\n    },\n\n    /**\n     * @return {Number} returns the bottom property of the region\n     */\n    getBottom: function(){\n        return this.bottom\n    },\n\n    /**\n     * @return {Number} returns the right property of the region\n     */\n    getRight: function(){\n        return this.right\n    },\n\n    /**\n     * Returns the area of the region\n     * @return {Number} the computed area\n     */\n    getArea: function(){\n        return this.getWidth() * this.getHeight()\n    },\n\n    constrainTo: function(contrain){\n        var intersect = this.getIntersection(contrain)\n        var shift\n\n        if (!intersect || !intersect.equals(this)){\n\n            var contrainWidth  = contrain.getWidth(),\n                contrainHeight = contrain.getHeight()\n\n            if (this.getWidth() > contrainWidth){\n                this.left = contrain.left\n                this.setWidth(contrainWidth)\n            }\n\n            if (this.getHeight() > contrainHeight){\n                this.top = contrain.top\n                this.setHeight(contrainHeight)\n            }\n\n            shift = {}\n\n            if (this.right > contrain.right){\n                shift.left = contrain.right - this.right\n            }\n\n            if (this.bottom > contrain.bottom){\n                shift.top = contrain.bottom - this.bottom\n            }\n\n            if (this.left < contrain.left){\n                shift.left = contrain.left - this.left\n            }\n\n            if (this.top < contrain.top){\n                shift.top = contrain.top - this.top\n            }\n\n            this.shift(shift)\n\n            return true\n        }\n\n        return false\n    },\n\n    __IS_REGION: true\n\n    /**\n     * @property {Number} top\n     */\n\n    /**\n     * @property {Number} right\n     */\n\n    /**\n     * @property {Number} bottom\n     */\n\n    /**\n     * @property {Number} left\n     */\n\n    /**\n     * @property {Number} [0] the top property\n     */\n\n    /**\n     * @property {Number} [1] the left property\n     */\n\n    /**\n     * @method getIntersection\n     * Returns a region that is the intersection of this region and the given region\n     * @param  {Region} region The region to intersect with\n     * @return {Region}        The intersection region\n     */\n\n    /**\n     * @method getUnion\n     * Returns a region that is the union of this region with the given region\n     * @param  {Region} region  The region to make union with\n     * @return {Region}        The union region. The smallest region that contains both this and the given region.\n     */\n\n})\n\nObject.defineProperties(REGION.prototype, {\n    width: {\n        get: function(){\n            return this.getWidth()\n        },\n        set: function(width){\n            return this.setWidth(width)\n        }\n    },\n    height: {\n        get: function(){\n            return this.getHeight()\n        },\n        set: function(height){\n            return this.setHeight(height)\n        }\n    }\n})\n\nrequire('./statics')(REGION)\n\nmodule.exports = REGION"],"mappings":"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"},"metadata":{},"sourceType":"script"}