{"ast":null,"code":"var _jsxFileName = \"/home/ocode/Downloads/Admin/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Dropdown, DropdownItem, DropdownMenu, DropdownToggle } from \"reactstrap\";\nimport { get, map } from \"lodash\";\nimport { withTranslation } from \"react-i18next\"; //i18n\n\nimport i18n from \"../../../i18n\";\nimport languages from \"../../../common/languages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LanguageDropdown = () => {\n  _s();\n\n  // Declare a new state variable, which we'll call \"menu\"\n  const [selectedLang, setSelectedLang] = useState(\"\");\n  const [menu, setMenu] = useState(false);\n  useEffect(() => {\n    const currentLanguage = localStorage.getItem(\"I18N_LANGUAGE\");\n    setSelectedLang(currentLanguage);\n  }, []);\n\n  const changeLanguageAction = lang => {\n    //set language as i18n\n    i18n.changeLanguage(lang);\n    localStorage.setItem(\"I18N_LANGUAGE\", lang);\n    setSelectedLang(lang);\n  };\n\n  const toggle = () => {\n    setMenu(!menu);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Dropdown, {\n      isOpen: menu,\n      toggle: toggle,\n      className: \"d-none d-sm-inline-block\",\n      children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n        className: \"btn header-item waves-effect\",\n        tag: \"button\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: get(languages, `${selectedLang}.flag`),\n          alt: \"Header Language\",\n          height: \"16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n        className: \"dropdown-menu-end\",\n        right: true,\n        children: map(Object.keys(languages), key => /*#__PURE__*/_jsxDEV(DropdownItem, {\n          onClick: () => changeLanguageAction(key),\n          className: `notify-item ${selectedLang === key ? \"active\" : \"none\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: get(languages, `${key}.flag`),\n            alt: \"Qovex\",\n            className: \"me-1\",\n            height: \"12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"align-middle\",\n            children: get(languages, `${key}.label`)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LanguageDropdown, \"LIsJHhbIfo5/NGM4s2dFIt+NozI=\");\n\n_c = LanguageDropdown;\nexport default withTranslation()(LanguageDropdown);\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageDropdown\");","map":{"version":3,"sources":["/home/ocode/Downloads/Admin/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js"],"names":["React","useEffect","useState","Dropdown","DropdownItem","DropdownMenu","DropdownToggle","get","map","withTranslation","i18n","languages","LanguageDropdown","selectedLang","setSelectedLang","menu","setMenu","currentLanguage","localStorage","getItem","changeLanguageAction","lang","changeLanguage","setItem","toggle","Object","keys","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,QADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,cAJF,QAKO,YALP;AAMA,SAASC,GAAT,EAAcC,GAAd,QAAyB,QAAzB;AACA,SAASC,eAAT,QAAgC,eAAhC,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,KAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAxB;AACAL,IAAAA,eAAe,CAACG,eAAD,CAAf;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMG,oBAAoB,GAAGC,IAAI,IAAI;AACnC;AACAX,IAAAA,IAAI,CAACY,cAAL,CAAoBD,IAApB;AACAH,IAAAA,YAAY,CAACK,OAAb,CAAqB,eAArB,EAAsCF,IAAtC;AACAP,IAAAA,eAAe,CAACO,IAAD,CAAf;AACD,GALD;;AAOA,QAAMG,MAAM,GAAG,MAAM;AACnBR,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAFD;;AAIA,sBACE;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,MAAM,EAAEA,IAAlB;AAAwB,MAAA,MAAM,EAAES,MAAhC;AAAwC,MAAA,SAAS,EAAC,0BAAlD;AAAA,8BACE,QAAC,cAAD;AAAgB,QAAA,SAAS,EAAC,8BAA1B;AAAyD,QAAA,GAAG,EAAC,QAA7D;AAAA,+BACE;AACE,UAAA,GAAG,EAAEjB,GAAG,CAACI,SAAD,EAAa,GAAEE,YAAa,OAA5B,CADV;AAEE,UAAA,GAAG,EAAC,iBAFN;AAGE,UAAA,MAAM,EAAC;AAHT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,YAAD;AAAc,QAAA,SAAS,EAAC,mBAAxB;AAA4C,QAAA,KAAK,MAAjD;AAAA,kBACGL,GAAG,CAACiB,MAAM,CAACC,IAAP,CAAYf,SAAZ,CAAD,EAAyBgB,GAAG,iBAC9B,QAAC,YAAD;AAEE,UAAA,OAAO,EAAE,MAAMP,oBAAoB,CAACO,GAAD,CAFrC;AAGE,UAAA,SAAS,EAAG,eAAcd,YAAY,KAAKc,GAAjB,GAAuB,QAAvB,GAAkC,MACzD,EAJL;AAAA,kCAME;AACE,YAAA,GAAG,EAAEpB,GAAG,CAACI,SAAD,EAAa,GAAEgB,GAAI,OAAnB,CADV;AAEE,YAAA,GAAG,EAAC,OAFN;AAGE,YAAA,SAAS,EAAC,MAHZ;AAIE,YAAA,MAAM,EAAC;AAJT;AAAA;AAAA;AAAA;AAAA,kBANF,eAYE;AAAM,YAAA,SAAS,EAAC,cAAhB;AAAA,sBACGpB,GAAG,CAACI,SAAD,EAAa,GAAEgB,GAAI,QAAnB;AADN;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA,WACOA,GADP;AAAA;AAAA;AAAA;AAAA,gBADE;AADN;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAiCD,CAtDD;;GAAMf,gB;;KAAAA,gB;AAwDN,eAAeH,eAAe,GAAGG,gBAAH,CAA9B","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n} from \"reactstrap\"\nimport { get, map } from \"lodash\"\nimport { withTranslation } from \"react-i18next\"\n\n//i18n\nimport i18n from \"../../../i18n\"\nimport languages from \"../../../common/languages\"\n\nconst LanguageDropdown = () => {\n  // Declare a new state variable, which we'll call \"menu\"\n  const [selectedLang, setSelectedLang] = useState(\"\")\n  const [menu, setMenu] = useState(false)\n\n  useEffect(() => {\n    const currentLanguage = localStorage.getItem(\"I18N_LANGUAGE\")\n    setSelectedLang(currentLanguage)\n  }, [])\n\n  const changeLanguageAction = lang => {\n    //set language as i18n\n    i18n.changeLanguage(lang)\n    localStorage.setItem(\"I18N_LANGUAGE\", lang)\n    setSelectedLang(lang)\n  }\n\n  const toggle = () => {\n    setMenu(!menu)\n  }\n\n  return (\n    <>\n      <Dropdown isOpen={menu} toggle={toggle} className=\"d-none d-sm-inline-block\">\n        <DropdownToggle className=\"btn header-item waves-effect\" tag=\"button\">\n          <img\n            src={get(languages, `${selectedLang}.flag`)}\n            alt=\"Header Language\"\n            height=\"16\"\n          />\n        </DropdownToggle>\n        <DropdownMenu className=\"dropdown-menu-end\" right>\n          {map(Object.keys(languages), key => (\n            <DropdownItem\n              key={key}\n              onClick={() => changeLanguageAction(key)}\n              className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\n                }`}\n            >\n              <img\n                src={get(languages, `${key}.flag`)}\n                alt=\"Qovex\"\n                className=\"me-1\"\n                height=\"12\"\n              />\n              <span className=\"align-middle\">\n                {get(languages, `${key}.label`)}\n              </span>\n            </DropdownItem>\n          ))}\n        </DropdownMenu>\n      </Dropdown>\n    </>\n  )\n}\n\nexport default withTranslation()(LanguageDropdown)\n"]},"metadata":{},"sourceType":"module"}