{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n// Login Redux States\nimport { FORGET_PASSWORD } from \"./actionTypes\";\nimport { userForgetPasswordSuccess, userForgetPasswordError } from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeForgetPwd, postJwtForgetPwd } from \"../../../helpers/fakebackend_helper\";\nconst fireBaseBackend = getFirebaseBackend();\n\n//If user is send successfully send mail link then dispatch redux action's are directly from here.\nfunction* forgetUser(_ref) {\n  let {\n    payload: {\n      user,\n      history\n    }\n  } = _ref;\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.forgetPassword, user.email);\n      if (response) {\n        yield put(userForgetPasswordSuccess(\"Reset link are sended to your mailbox, check there first\"));\n      }\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtForgetPwd, \"/jwt-forget-pwd\", {\n        email: user.email\n      });\n      if (response) {\n        yield put(userForgetPasswordSuccess(\"Reset link are sended to your mailbox, check there first\"));\n      }\n    } else {\n      const response = yield call(postFakeForgetPwd, \"/fake-forget-pwd\", {\n        email: user.email\n      });\n      if (response) {\n        yield put(userForgetPasswordSuccess(\"Reset link are sended to your mailbox, check there first\"));\n      }\n    }\n  } catch (error) {\n    yield put(userForgetPasswordError(error));\n  }\n}\nexport function* watchUserPasswordForget() {\n  yield takeEvery(FORGET_PASSWORD, forgetUser);\n}\nfunction* forgetPasswordSaga() {\n  yield all([fork(watchUserPasswordForget)]);\n}\nexport default forgetPasswordSaga;","map":{"version":3,"names":["takeEvery","fork","put","all","call","FORGET_PASSWORD","userForgetPasswordSuccess","userForgetPasswordError","getFirebaseBackend","postFakeForgetPwd","postJwtForgetPwd","fireBaseBackend","forgetUser","_ref","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","forgetPassword","email","error","watchUserPasswordForget","forgetPasswordSaga"],"sources":["/home/ocode-2023/Desktop/Dashboard/Admin/src/store/auth/forgetpwd/saga.js"],"sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"\n\n// Login Redux States\nimport { FORGET_PASSWORD } from \"./actionTypes\"\nimport { userForgetPasswordSuccess, userForgetPasswordError } from \"./actions\"\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"\nimport {\n  postFakeForgetPwd,\n  postJwtForgetPwd,\n} from \"../../../helpers/fakebackend_helper\"\n\nconst fireBaseBackend = getFirebaseBackend()\n\n//If user is send successfully send mail link then dispatch redux action's are directly from here.\nfunction* forgetUser({ payload: { user, history } }) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.forgetPassword, user.email)\n      if (response) {\n        yield put(\n          userForgetPasswordSuccess(\n            \"Reset link are sended to your mailbox, check there first\"\n          )\n        )\n      }\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtForgetPwd, \"/jwt-forget-pwd\", {\n        email: user.email,\n      })\n      if (response) {\n        yield put(\n          userForgetPasswordSuccess(\n            \"Reset link are sended to your mailbox, check there first\"\n          )\n        )\n      }\n    } else {\n      const response = yield call(postFakeForgetPwd, \"/fake-forget-pwd\", {\n        email: user.email,\n      })\n      if (response) {\n        yield put(\n          userForgetPasswordSuccess(\n            \"Reset link are sended to your mailbox, check there first\"\n          )\n        )\n      }\n    }\n  } catch (error) {\n    yield put(userForgetPasswordError(error))\n  }\n}\n\nexport function* watchUserPasswordForget() {\n  yield takeEvery(FORGET_PASSWORD, forgetUser)\n}\n\nfunction* forgetPasswordSaga() {\n  yield all([fork(watchUserPasswordForget)])\n}\n\nexport default forgetPasswordSaga\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;;AAEpE;AACA,SAASC,eAAe,QAAQ,eAAe;AAC/C,SAASC,yBAAyB,EAAEC,uBAAuB,QAAQ,WAAW;;AAE9E;AACA,SAASC,kBAAkB,QAAQ,kCAAkC;AACrE,SACEC,iBAAiB,EACjBC,gBAAgB,QACX,qCAAqC;AAE5C,MAAMC,eAAe,GAAGH,kBAAkB,CAAC,CAAC;;AAE5C;AACA,UAAUI,UAAUA,CAAAC,IAAA,EAAiC;EAAA,IAAhC;IAAEC,OAAO,EAAE;MAAEC,IAAI;MAAEC;IAAQ;EAAE,CAAC,GAAAH,IAAA;EACjD,IAAI;IACF,IAAII,OAAO,CAACC,GAAG,CAACC,qBAAqB,KAAK,UAAU,EAAE;MACpD,MAAMC,QAAQ,GAAG,MAAMhB,IAAI,CAACO,eAAe,CAACU,cAAc,EAAEN,IAAI,CAACO,KAAK,CAAC;MACvE,IAAIF,QAAQ,EAAE;QACZ,MAAMlB,GAAG,CACPI,yBAAyB,CACvB,0DACF,CACF,CAAC;MACH;IACF,CAAC,MAAM,IAAIW,OAAO,CAACC,GAAG,CAACC,qBAAqB,KAAK,KAAK,EAAE;MACtD,MAAMC,QAAQ,GAAG,MAAMhB,IAAI,CAACM,gBAAgB,EAAE,iBAAiB,EAAE;QAC/DY,KAAK,EAAEP,IAAI,CAACO;MACd,CAAC,CAAC;MACF,IAAIF,QAAQ,EAAE;QACZ,MAAMlB,GAAG,CACPI,yBAAyB,CACvB,0DACF,CACF,CAAC;MACH;IACF,CAAC,MAAM;MACL,MAAMc,QAAQ,GAAG,MAAMhB,IAAI,CAACK,iBAAiB,EAAE,kBAAkB,EAAE;QACjEa,KAAK,EAAEP,IAAI,CAACO;MACd,CAAC,CAAC;MACF,IAAIF,QAAQ,EAAE;QACZ,MAAMlB,GAAG,CACPI,yBAAyB,CACvB,0DACF,CACF,CAAC;MACH;IACF;EACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACd,MAAMrB,GAAG,CAACK,uBAAuB,CAACgB,KAAK,CAAC,CAAC;EAC3C;AACF;AAEA,OAAO,UAAUC,uBAAuBA,CAAA,EAAG;EACzC,MAAMxB,SAAS,CAACK,eAAe,EAAEO,UAAU,CAAC;AAC9C;AAEA,UAAUa,kBAAkBA,CAAA,EAAG;EAC7B,MAAMtB,GAAG,CAAC,CAACF,IAAI,CAACuB,uBAAuB,CAAC,CAAC,CAAC;AAC5C;AAEA,eAAeC,kBAAkB"},"metadata":{},"sourceType":"module"}