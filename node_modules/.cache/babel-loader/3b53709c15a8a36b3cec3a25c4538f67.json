{"ast":null,"code":"import _objectSpread from\"/home/ocode/Downloads/Admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import axios from\"axios\";import MockAdapter from\"axios-mock-adapter\";import*as url from\"../url_helper\";import accessToken from\"../jwt-token-access/accessToken\";import{calenderDefaultCategories,events,tasks}from\"../../common/data\";var users=[{uid:1,username:\"admin\",role:\"admin\",password:\"123456\",email:\"admin@themesbrand.com\"}];var fakeBackend=function fakeBackend(){// This sets the mock adapter on the default instance\nvar mock=new MockAdapter(axios);mock.onPost(url.POST_FAKE_REGISTER).reply(function(config){var user=JSON.parse(config[\"data\"]);users.push(user);return new Promise(function(resolve,reject){setTimeout(function(){resolve([200,user]);});});});mock.onPost(\"/post-fake-login\").reply(function(config){var user=JSON.parse(config[\"data\"]);var validUser=users.filter(function(usr){return usr.email===user.email&&usr.password===user.password;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser[\"length\"]===1){resolve([200,validUser[0]]);}else{reject([400,\"Username and password are invalid. Please enter correct username and password\"]);}});});});mock.onPost(\"/post-jwt-profile\").reply(function(config){var user=JSON.parse(config[\"data\"]);var one=config.headers;var finalToken=one.Authorization;var validUser=users.filter(function(usr){return usr.uid===user.idx;});return new Promise(function(resolve,reject){setTimeout(function(){// Verify Jwt token from header.Authorization\nif(finalToken===accessToken){if(validUser[\"length\"]===1){var objIndex;//Find index of specific object using findIndex method.\nobjIndex=users.findIndex(function(obj){return obj.uid===user.idx;});//Update object's name property.\nusers[objIndex].username=user.username;// Assign a value to locastorage\nlocalStorage.removeItem(\"authUser\");localStorage.setItem(\"authUser\",JSON.stringify(users[objIndex]));resolve([200,\"Profile Editted successfully\"]);}else{reject([400,\"Something wrong for edit profile\"]);}}else{reject([400,\"Invalid Token !!\"]);}});});});mock.onPost(\"/post-fake-profile\").reply(function(config){var user=JSON.parse(config[\"data\"]);var validUser=users.filter(function(usr){return usr.uid===user.idx;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser[\"length\"]===1){var objIndex;//Find index of specific object using findIndex method.\nobjIndex=users.findIndex(function(obj){return obj.uid===user.idx;});//Update object's name property.\nusers[objIndex].username=user.username;// Assign a value to locastorage\nlocalStorage.removeItem(\"authUser\");localStorage.setItem(\"authUser\",JSON.stringify(users[objIndex]));resolve([200,\"Profile Editted successfully\"]);}else{reject([400,\"Something wrong for edit profile\"]);}});});});mock.onPost(\"/fake-forget-pwd\").reply(function(config){// User needs to check that user is eXist or not and send mail for Reset New password\nreturn new Promise(function(resolve,reject){setTimeout(function(){resolve([200,\"Check you mail and reset your password.\"]);});});});mock.onPost(\"/post-jwt-register\").reply(function(config){var user=JSON.parse(config[\"data\"]);users.push(user);return new Promise(function(resolve,reject){setTimeout(function(){resolve([200,user]);});});});mock.onPost(\"/post-jwt-login\").reply(function(config){var user=JSON.parse(config[\"data\"]);var validUser=users.filter(function(usr){return usr.email===user.email&&usr.password===user.password;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser[\"length\"]===1){// You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\nvar token=accessToken;// JWT AccessToken\nvar tokenObj={accessToken:token};// Token Obj\nvar validUserObj=_objectSpread(_objectSpread({},validUser[0]),tokenObj);// validUser Obj\nresolve([200,validUserObj]);}else{reject([400,\"Username and password are invalid. Please enter correct username and password\"]);}});});});mock.onPost(\"/post-jwt-profile\").reply(function(config){var user=JSON.parse(config[\"data\"]);var one=config.headers;var finalToken=one.Authorization;var validUser=users.filter(function(usr){return usr.uid===user.idx;});return new Promise(function(resolve,reject){setTimeout(function(){// Verify Jwt token from header.Authorization\nif(finalToken===accessToken){if(validUser[\"length\"]===1){var objIndex;//Find index of specific object using findIndex method.\nobjIndex=users.findIndex(function(obj){return obj.uid===user.idx;});//Update object's name property.\nusers[objIndex].username=user.username;// Assign a value to locastorage\nlocalStorage.removeItem(\"authUser\");localStorage.setItem(\"authUser\",JSON.stringify(users[objIndex]));resolve([200,\"Profile Editted successfully\"]);}else{reject([400,\"Something wrong for edit profile\"]);}}else{reject([400,\"Invalid Token !!\"]);}});});});mock.onPost(\"/post-fake-profile\").reply(function(config){var user=JSON.parse(config[\"data\"]);var validUser=users.filter(function(usr){return usr.uid===user.idx;});return new Promise(function(resolve,reject){setTimeout(function(){if(validUser[\"length\"]===1){var objIndex;//Find index of specific object using findIndex method.\nobjIndex=users.findIndex(function(obj){return obj.uid===user.idx;});//Update object's name property.\nusers[objIndex].username=user.username;// Assign a value to locastorage\nlocalStorage.removeItem(\"authUser\");localStorage.setItem(\"authUser\",JSON.stringify(users[objIndex]));resolve([200,\"Profile Editted successfully\"]);}else{reject([400,\"Something wrong for edit profile\"]);}});});});mock.onPost(\"/jwt-forget-pwd\").reply(function(config){// User needs to check that user is eXist or not and send mail for Reset New password\nreturn new Promise(function(resolve,reject){setTimeout(function(){resolve([200,\"Check you mail and reset your password.\"]);});});});mock.onPost(\"/social-login\").reply(function(config){var user=JSON.parse(config[\"data\"]);return new Promise(function(resolve,reject){setTimeout(function(){if(user&&user.token){// You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\nvar token=accessToken;// JWT AccessToken\nvar tokenObj={accessToken:token};// Token Obj\nvar validUserObj=_objectSpread(_objectSpread({},user[0]),tokenObj);// validUser Obj\nresolve([200,validUserObj]);}else{reject([400,\"Username and password are invalid. Please enter correct username and password\"]);}});});});mock.onGet(url.GET_TASKS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(tasks){// Passing fake JSON data as response\nresolve([200,tasks]);}else{reject([400,\"Cannot get tasks\"]);}});});});mock.onGet(url.GET_EVENTS).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(events){// Passing fake JSON data as response\nresolve([200,events]);}else{reject([400,\"Cannot get events\"]);}});});});mock.onPost(url.ADD_NEW_EVENT).reply(function(event){return new Promise(function(resolve,reject){setTimeout(function(){if(event&&event.data){// Passing fake JSON data as response\nresolve([200,event.data]);}else{reject([400,\"Cannot add event\"]);}});});});mock.onPut(url.UPDATE_EVENT).reply(function(event){return new Promise(function(resolve,reject){setTimeout(function(){if(event&&event.data){// Passing fake JSON data as response\nresolve([200,event.data]);}else{reject([400,\"Cannot update event\"]);}});});});mock.onDelete(url.DELETE_EVENT).reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){if(config&&config.headers){// Passing fake JSON data as response\nresolve([200,config.headers.event]);}else{reject([400,\"Cannot delete event\"]);}});});});mock.onGet(url.GET_CATEGORIES).reply(function(){return new Promise(function(resolve,reject){setTimeout(function(){if(calenderDefaultCategories){// Passing fake JSON data as response\nresolve([200,calenderDefaultCategories]);}else{reject([400,\"Cannot get categories\"]);}});});});};export default fakeBackend;","map":{"version":3,"sources":["/home/ocode/Downloads/Admin/src/helpers/AuthType/fakeBackend.js"],"names":["axios","MockAdapter","url","accessToken","calenderDefaultCategories","events","tasks","users","uid","username","role","password","email","fakeBackend","mock","onPost","POST_FAKE_REGISTER","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","token","tokenObj","validUserObj","onGet","GET_TASKS","GET_EVENTS","ADD_NEW_EVENT","event","data","onPut","UPDATE_EVENT","onDelete","DELETE_EVENT","GET_CATEGORIES"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport MockAdapter from \"axios-mock-adapter\"\nimport * as url from \"../url_helper\"\nimport accessToken from \"../jwt-token-access/accessToken\"\n\nimport {\n  calenderDefaultCategories,\n  events,\n  tasks,\n} from \"../../common/data\"\n\nlet users = [\n  {\n    uid: 1,\n    username: \"admin\",\n    role: \"admin\",\n    password: \"123456\",\n    email: \"admin@themesbrand.com\",\n  },\n]\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios)\n\nmock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n    \n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Editted successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Editted successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Editted successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Editted successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...user[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks])\n        } else {\n          reject([400, \"Cannot get tasks\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events])\n        } else {\n          reject([400, \"Cannot get events\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot add event\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot update event\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event])\n        } else {\n          reject([400, \"Cannot delete event\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories])\n        } else {\n          reject([400, \"Cannot get categories\"])\n        }\n      })\n    })\n  })\n\n}\n\nexport default fakeBackend\n"]},"metadata":{},"sourceType":"module"}