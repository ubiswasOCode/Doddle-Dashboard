{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../url_helper\";\nimport accessToken from \"../jwt-token-access/accessToken\";\nimport { calenderDefaultCategories, events, tasks } from \"../../common/data\";\nlet users = [{\n  uid: 1,\n  username: \"admin\",\n  role: \"admin\",\n  password: \"123456\",\n  email: \"admin@themesbrand.com\"\n}];\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios);\n  mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex;\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n            //Update object's name property.\n            users[objIndex].username = user.username;\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Editted successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex;\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Editted successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken;\n\n          // JWT AccessToken\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n          const validUserObj = {\n            ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex;\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n            //Update object's name property.\n            users[objIndex].username = user.username;\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Editted successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex;\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Editted successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"]);\n      });\n    });\n  });\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken;\n\n          // JWT AccessToken\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n          const validUserObj = {\n            ...user[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks]);\n        } else {\n          reject([400, \"Cannot get tasks\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events]);\n        } else {\n          reject([400, \"Cannot get events\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot add event\"]);\n        }\n      });\n    });\n  });\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data]);\n        } else {\n          reject([400, \"Cannot update event\"]);\n        }\n      });\n    });\n  });\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event]);\n        } else {\n          reject([400, \"Cannot delete event\"]);\n        }\n      });\n    });\n  });\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories]);\n        } else {\n          reject([400, \"Cannot get categories\"]);\n        }\n      });\n    });\n  });\n};\nexport default fakeBackend;","map":{"version":3,"names":["axios","MockAdapter","url","accessToken","calenderDefaultCategories","events","tasks","users","uid","username","role","password","email","fakeBackend","mock","onPost","POST_FAKE_REGISTER","reply","config","user","JSON","parse","push","Promise","resolve","reject","setTimeout","validUser","filter","usr","one","headers","finalToken","Authorization","idx","objIndex","findIndex","obj","localStorage","removeItem","setItem","stringify","token","tokenObj","validUserObj","onGet","GET_TASKS","GET_EVENTS","ADD_NEW_EVENT","event","data","onPut","UPDATE_EVENT","onDelete","DELETE_EVENT","GET_CATEGORIES"],"sources":["/home/ocode-2023/Desktop/Dashboard/Admin/src/helpers/AuthType/fakeBackend.js"],"sourcesContent":["import axios from \"axios\"\nimport MockAdapter from \"axios-mock-adapter\"\nimport * as url from \"../url_helper\"\nimport accessToken from \"../jwt-token-access/accessToken\"\n\nimport {\n  calenderDefaultCategories,\n  events,\n  tasks,\n} from \"../../common/data\"\n\nlet users = [\n  {\n    uid: 1,\n    username: \"admin\",\n    role: \"admin\",\n    password: \"123456\",\n    email: \"admin@themesbrand.com\",\n  },\n]\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios)\n\nmock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n    \n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          resolve([200, validUser[0]])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Editted successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Editted successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/fake-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    users.push(user)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user])\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    )\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const one = config.headers\n\n    let finalToken = one.Authorization\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n            //Update object's name property.\n            users[objIndex].username = user.username\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\")\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n            resolve([200, \"Profile Editted successfully\"])\n          } else {\n            reject([400, \"Something wrong for edit profile\"])\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    const validUser = users.filter(usr => usr.uid === user.idx)\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx)\n\n          //Update object's name property.\n          users[objIndex].username = user.username\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\")\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]))\n\n          resolve([200, \"Profile Editted successfully\"])\n        } else {\n          reject([400, \"Something wrong for edit profile\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n    // User needs to check that user is eXist or not and send mail for Reset New password\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, \"Check you mail and reset your password.\"])\n      })\n    })\n  })\n\n  mock.onPost(\"/social-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"])\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (user && user.token) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token } // Token Obj\n          const validUserObj = { ...user[0], ...tokenObj } // validUser Obj\n\n          resolve([200, validUserObj])\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_TASKS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (tasks) {\n          // Passing fake JSON data as response\n          resolve([200, tasks])\n        } else {\n          reject([400, \"Cannot get tasks\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_EVENTS).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (events) {\n          // Passing fake JSON data as response\n          resolve([200, events])\n        } else {\n          reject([400, \"Cannot get events\"])\n        }\n      })\n    })\n  })\n\n  mock.onPost(url.ADD_NEW_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot add event\"])\n        }\n      })\n    })\n  })\n\n  mock.onPut(url.UPDATE_EVENT).reply(event => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (event && event.data) {\n          // Passing fake JSON data as response\n          resolve([200, event.data])\n        } else {\n          reject([400, \"Cannot update event\"])\n        }\n      })\n    })\n  })\n\n  mock.onDelete(url.DELETE_EVENT).reply(config => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (config && config.headers) {\n          // Passing fake JSON data as response\n          resolve([200, config.headers.event])\n        } else {\n          reject([400, \"Cannot delete event\"])\n        }\n      })\n    })\n  })\n\n  mock.onGet(url.GET_CATEGORIES).reply(() => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (calenderDefaultCategories) {\n          // Passing fake JSON data as response\n          resolve([200, calenderDefaultCategories])\n        } else {\n          reject([400, \"Cannot get categories\"])\n        }\n      })\n    })\n  })\n\n}\n\nexport default fakeBackend\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}