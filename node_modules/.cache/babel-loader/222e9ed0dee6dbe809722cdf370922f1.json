{"ast":null,"code":"'use strict';\n\nvar Region = require('region');\n/**\n * @static\n * Aligns the source region to the target region, so as to correspond to the given alignment.\n *\n * NOTE that this method makes changes on the sourceRegion in order for it to be aligned as specified.\n *\n * @param {Region} sourceRegion\n * @param {Region} targetRegion\n *\n * @param {String} align A string with 2 valid align positions, eg: 'tr-bl'.\n * For valid positions, see {@link Region#getPoint}\n *\n * Having 2 regions, we need to be able to align them as we wish:\n *\n * for example, if we have\n *\n *       source    target\n *       ________________\n *       ____\n *      |    |     ________\n *      |____|    |        |\n *                |        |\n *                |________|\n *\n * and we align 't-t', we get:\n *\n *       source    target\n *       _________________\n *\n *       ____      ________\n *      |    |    |        |\n *      |____|    |        |\n *                |________|\n *\n *  In this case, the source was moved down to be aligned to the top of the target\n *\n *\n * and if we align 'tc-tc' we get\n *\n *       source     target\n *       __________________\n *\n *                 ________\n *                | |    | |\n *                | |____| |\n *                |________|\n *\n *  Since the source was moved to have the top-center point to be the same with target top-center\n *\n *\n *\n * @return {RegionClass} The Region class\n */\n\n\nRegion.align = function (sourceRegion, targetRegion, align) {\n  targetRegion = Region.from(targetRegion);\n  align = (align || 'c-c').split('-'); //<debug>\n\n  if (align.length != 2) {\n    console.warn('Incorrect region alignment! The align parameter need to be in the form \\'br-c\\', that is, a - separated string!', align);\n  } //</debug>\n\n\n  return Region.alignToPoint(sourceRegion, targetRegion.getPoint(align[1]), align[0]);\n};\n/**\n * Modifies the given region to be aligned to the point, as specified by anchor\n *\n * @param {Region} region The region to align to the point\n * @param {Object} point The point to be used as a reference\n * @param {Number} point.x\n * @param {Number} point.y\n * @param {String} anchor The position where to anchor the region to the point. See {@link #getPoint} for available options/\n *\n * @return {Region} the given region\n */\n\n\nRegion.alignToPoint = function (region, point, anchor) {\n  region = Region.from(region);\n  var sourcePoint = region.getPoint(anchor);\n  var count = 0;\n  var shiftObj = {};\n\n  if (sourcePoint.x != null && point.x != null) {\n    count++;\n    shiftObj.left = point.x - sourcePoint.x;\n  }\n\n  if (sourcePoint.y != null && point.y != null) {\n    count++;\n    shiftObj.top = point.y - sourcePoint.y;\n  }\n\n  if (count) {\n    region.shift(shiftObj);\n  }\n\n  return region;\n};","map":{"version":3,"sources":["/home/ocode-2023/Desktop/Dashboard/Admin/node_modules/region-align/Region.static.js"],"names":["Region","require","align","sourceRegion","targetRegion","from","split","length","console","warn","alignToPoint","getPoint","region","point","anchor","sourcePoint","count","shiftObj","x","left","y","top","shift"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,MAAM,CAACE,KAAP,GAAe,UAASC,YAAT,EAAuBC,YAAvB,EAAqCF,KAArC,EAA2C;AAEtDE,EAAAA,YAAY,GAAGJ,MAAM,CAACK,IAAP,CAAYD,YAAZ,CAAf;AAEAF,EAAAA,KAAK,GAAG,CAACA,KAAK,IAAI,KAAV,EAAiBI,KAAjB,CAAuB,GAAvB,CAAR,CAJsD,CAMtD;;AACA,MAAIJ,KAAK,CAACK,MAAN,IAAgB,CAApB,EAAsB;AAClBC,IAAAA,OAAO,CAACC,IAAR,CAAa,iHAAb,EAAgIP,KAAhI;AACH,GATqD,CAUtD;;;AAEA,SAAOF,MAAM,CAACU,YAAP,CAAoBP,YAApB,EAAkCC,YAAY,CAACO,QAAb,CAAsBT,KAAK,CAAC,CAAD,CAA3B,CAAlC,EAAmEA,KAAK,CAAC,CAAD,CAAxE,CAAP;AACH,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,MAAM,CAACU,YAAP,GAAsB,UAASE,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,EAA+B;AAEjDF,EAAAA,MAAM,GAAGZ,MAAM,CAACK,IAAP,CAAYO,MAAZ,CAAT;AAEA,MAAIG,WAAW,GAAGH,MAAM,CAACD,QAAP,CAAgBG,MAAhB,CAAlB;AACA,MAAIE,KAAK,GAAS,CAAlB;AACA,MAAIC,QAAQ,GAAM,EAAlB;;AAEA,MACQF,WAAW,CAACG,CAAZ,IAAiB,IAAjB,IACAL,KAAK,CAACK,CAAN,IAAW,IAFnB,EAGK;AAEGF,IAAAA,KAAK;AACLC,IAAAA,QAAQ,CAACE,IAAT,GAAgBN,KAAK,CAACK,CAAN,GAAUH,WAAW,CAACG,CAAtC;AACP;;AAED,MACQH,WAAW,CAACK,CAAZ,IAAiB,IAAjB,IACAP,KAAK,CAACO,CAAN,IAAW,IAFnB,EAGK;AACGJ,IAAAA,KAAK;AACLC,IAAAA,QAAQ,CAACI,GAAT,GAAeR,KAAK,CAACO,CAAN,GAAUL,WAAW,CAACK,CAArC;AACP;;AAED,MAAIJ,KAAJ,EAAU;AAENJ,IAAAA,MAAM,CAACU,KAAP,CAAaL,QAAb;AAEH;;AAED,SAAOL,MAAP;AACH,CAhCD","sourcesContent":["'use strict'\n\nvar Region = require('region')\n\n/**\n * @static\n * Aligns the source region to the target region, so as to correspond to the given alignment.\n *\n * NOTE that this method makes changes on the sourceRegion in order for it to be aligned as specified.\n *\n * @param {Region} sourceRegion\n * @param {Region} targetRegion\n *\n * @param {String} align A string with 2 valid align positions, eg: 'tr-bl'.\n * For valid positions, see {@link Region#getPoint}\n *\n * Having 2 regions, we need to be able to align them as we wish:\n *\n * for example, if we have\n *\n *       source    target\n *       ________________\n *       ____\n *      |    |     ________\n *      |____|    |        |\n *                |        |\n *                |________|\n *\n * and we align 't-t', we get:\n *\n *       source    target\n *       _________________\n *\n *       ____      ________\n *      |    |    |        |\n *      |____|    |        |\n *                |________|\n *\n *  In this case, the source was moved down to be aligned to the top of the target\n *\n *\n * and if we align 'tc-tc' we get\n *\n *       source     target\n *       __________________\n *\n *                 ________\n *                | |    | |\n *                | |____| |\n *                |________|\n *\n *  Since the source was moved to have the top-center point to be the same with target top-center\n *\n *\n *\n * @return {RegionClass} The Region class\n */\nRegion.align = function(sourceRegion, targetRegion, align){\n\n    targetRegion = Region.from(targetRegion)\n\n    align = (align || 'c-c').split('-')\n\n    //<debug>\n    if (align.length != 2){\n        console.warn('Incorrect region alignment! The align parameter need to be in the form \\'br-c\\', that is, a - separated string!', align)\n    }\n    //</debug>\n\n    return Region.alignToPoint(sourceRegion, targetRegion.getPoint(align[1]), align[0])\n}\n\n/**\n * Modifies the given region to be aligned to the point, as specified by anchor\n *\n * @param {Region} region The region to align to the point\n * @param {Object} point The point to be used as a reference\n * @param {Number} point.x\n * @param {Number} point.y\n * @param {String} anchor The position where to anchor the region to the point. See {@link #getPoint} for available options/\n *\n * @return {Region} the given region\n */\nRegion.alignToPoint = function(region, point, anchor){\n\n    region = Region.from(region)\n\n    var sourcePoint = region.getPoint(anchor)\n    var count       = 0\n    var shiftObj    = {}\n\n    if (\n            sourcePoint.x != null &&\n            point.x != null\n        ){\n\n            count++\n            shiftObj.left = point.x - sourcePoint.x\n    }\n\n    if (\n            sourcePoint.y != null &&\n            point.y != null\n        ){\n            count++\n            shiftObj.top = point.y - sourcePoint.y\n    }\n\n    if (count){\n\n        region.shift(shiftObj)\n\n    }\n\n    return region\n}"]},"metadata":{},"sourceType":"script"}